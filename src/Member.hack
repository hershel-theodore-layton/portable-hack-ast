/** portable-hack-ast is MIT licensed, see /LICENSE. */
namespace HTL\Pha;

newtype Member = (SyntaxKind, string);

function member_from_tuple((SyntaxKind, string) $tuple)[]: Member {
  return $tuple;
}

function member_to_tuple(Member $member)[]: (SyntaxKind, string) {
  return $member;
}

function member_get_name(Member $member)[]: string {
  return $member[1];
}

function member_get_syntax_kind(Member $member)[]: SyntaxKind {
  return $member[0];
}

// #region GENERATED CODE DO NOT EDIT BY HAND!
// This code was generated by bin/codegen_kind_constants.hack "4.94-172".

const Member MEMBER_ALIAS_ATTRIBUTE_SPEC = tuple(KIND_ALIAS_DECLARATION, 'alias_attribute_spec');
const Member MEMBER_ALIAS_CONSTRAINT = tuple(KIND_ALIAS_DECLARATION, 'alias_constraint');
const Member MEMBER_ALIAS_EQUAL = tuple(KIND_ALIAS_DECLARATION, 'alias_equal');
const Member MEMBER_ALIAS_GENERIC_PARAMETER = tuple(KIND_ALIAS_DECLARATION, 'alias_generic_parameter');
const Member MEMBER_ALIAS_KEYWORD = tuple(KIND_ALIAS_DECLARATION, 'alias_keyword');
const Member MEMBER_ALIAS_MODIFIERS = tuple(KIND_ALIAS_DECLARATION, 'alias_modifiers');
const Member MEMBER_ALIAS_MODULE_KW_OPT = tuple(KIND_ALIAS_DECLARATION, 'alias_module_kw_opt');
const Member MEMBER_ALIAS_NAME = tuple(KIND_ALIAS_DECLARATION, 'alias_name');
const Member MEMBER_ALIAS_SEMICOLON = tuple(KIND_ALIAS_DECLARATION, 'alias_semicolon');
const Member MEMBER_ALIAS_TYPE = tuple(KIND_ALIAS_DECLARATION, 'alias_type');
const Member MEMBER_ANONYMOUS_ASYNC_KEYWORD = tuple(KIND_ANONYMOUS_FUNCTION, 'anonymous_async_keyword');
const Member MEMBER_ANONYMOUS_ATTRIBUTE_SPEC = tuple(KIND_ANONYMOUS_FUNCTION, 'anonymous_attribute_spec');
const Member MEMBER_ANONYMOUS_BODY = tuple(KIND_ANONYMOUS_FUNCTION, 'anonymous_body');
const Member MEMBER_ANONYMOUS_CLASS_ARGUMENT_LIST = tuple(KIND_ANONYMOUS_CLASS, 'anonymous_class_argument_list');
const Member MEMBER_ANONYMOUS_CLASS_BODY = tuple(KIND_ANONYMOUS_CLASS, 'anonymous_class_body');
const Member MEMBER_ANONYMOUS_CLASS_CLASS_KEYWORD = tuple(KIND_ANONYMOUS_CLASS, 'anonymous_class_class_keyword');
const Member MEMBER_ANONYMOUS_CLASS_EXTENDS_KEYWORD = tuple(KIND_ANONYMOUS_CLASS, 'anonymous_class_extends_keyword');
const Member MEMBER_ANONYMOUS_CLASS_EXTENDS_LIST = tuple(KIND_ANONYMOUS_CLASS, 'anonymous_class_extends_list');
const Member MEMBER_ANONYMOUS_CLASS_IMPLEMENTS_KEYWORD = tuple(KIND_ANONYMOUS_CLASS, 'anonymous_class_implements_keyword');
const Member MEMBER_ANONYMOUS_CLASS_IMPLEMENTS_LIST = tuple(KIND_ANONYMOUS_CLASS, 'anonymous_class_implements_list');
const Member MEMBER_ANONYMOUS_CLASS_LEFT_PAREN = tuple(KIND_ANONYMOUS_CLASS, 'anonymous_class_left_paren');
const Member MEMBER_ANONYMOUS_CLASS_RIGHT_PAREN = tuple(KIND_ANONYMOUS_CLASS, 'anonymous_class_right_paren');
const Member MEMBER_ANONYMOUS_COLON = tuple(KIND_ANONYMOUS_FUNCTION, 'anonymous_colon');
const Member MEMBER_ANONYMOUS_CTX_LIST = tuple(KIND_ANONYMOUS_FUNCTION, 'anonymous_ctx_list');
const Member MEMBER_ANONYMOUS_FUNCTION_KEYWORD = tuple(KIND_ANONYMOUS_FUNCTION, 'anonymous_function_keyword');
const Member MEMBER_ANONYMOUS_LEFT_PAREN = tuple(KIND_ANONYMOUS_FUNCTION, 'anonymous_left_paren');
const Member MEMBER_ANONYMOUS_PARAMETERS = tuple(KIND_ANONYMOUS_FUNCTION, 'anonymous_parameters');
const Member MEMBER_ANONYMOUS_READONLY_RETURN = tuple(KIND_ANONYMOUS_FUNCTION, 'anonymous_readonly_return');
const Member MEMBER_ANONYMOUS_RIGHT_PAREN = tuple(KIND_ANONYMOUS_FUNCTION, 'anonymous_right_paren');
const Member MEMBER_ANONYMOUS_STATIC_KEYWORD = tuple(KIND_ANONYMOUS_FUNCTION, 'anonymous_static_keyword');
const Member MEMBER_ANONYMOUS_TYPE = tuple(KIND_ANONYMOUS_FUNCTION, 'anonymous_type');
const Member MEMBER_ANONYMOUS_USE = tuple(KIND_ANONYMOUS_FUNCTION, 'anonymous_use');
const Member MEMBER_ANONYMOUS_USE_KEYWORD = tuple(KIND_ANONYMOUS_FUNCTION_USE_CLAUSE, 'anonymous_use_keyword');
const Member MEMBER_ANONYMOUS_USE_LEFT_PAREN = tuple(KIND_ANONYMOUS_FUNCTION_USE_CLAUSE, 'anonymous_use_left_paren');
const Member MEMBER_ANONYMOUS_USE_RIGHT_PAREN = tuple(KIND_ANONYMOUS_FUNCTION_USE_CLAUSE, 'anonymous_use_right_paren');
const Member MEMBER_ANONYMOUS_USE_VARIABLES = tuple(KIND_ANONYMOUS_FUNCTION_USE_CLAUSE, 'anonymous_use_variables');
const Member MEMBER_AS_LEFT_OPERAND = tuple(KIND_AS_EXPRESSION, 'as_left_operand');
const Member MEMBER_AS_OPERATOR = tuple(KIND_AS_EXPRESSION, 'as_operator');
const Member MEMBER_AS_RIGHT_OPERAND = tuple(KIND_AS_EXPRESSION, 'as_right_operand');
const Member MEMBER_ATTRIBUTE_AT = tuple(KIND_ATTRIBUTE_SYNTAX, 'attribute_at');
const Member MEMBER_ATTRIBUTE_ATTRIBUTE_NAME = tuple(KIND_ATTRIBUTE_SYNTAX, 'attribute_attribute_name');
const Member MEMBER_ATTRIBUTE_SPECIFICATION_ATTRIBUTES = tuple(KIND_ATTRIBUTE_SPECIFICATION, 'attribute_specification_attributes');
const Member MEMBER_ATTRIBUTIZED_SPECIFIER_ATTRIBUTE_SPEC = tuple(KIND_ATTRIBUTIZED_SPECIFIER, 'attributized_specifier_attribute_spec');
const Member MEMBER_ATTRIBUTIZED_SPECIFIER_TYPE = tuple(KIND_ATTRIBUTIZED_SPECIFIER, 'attributized_specifier_type');
const Member MEMBER_AWAITABLE_ASYNC = tuple(KIND_AWAITABLE_CREATION_EXPRESSION, 'awaitable_async');
const Member MEMBER_AWAITABLE_ATTRIBUTE_SPEC = tuple(KIND_AWAITABLE_CREATION_EXPRESSION, 'awaitable_attribute_spec');
const Member MEMBER_AWAITABLE_COMPOUND_STATEMENT = tuple(KIND_AWAITABLE_CREATION_EXPRESSION, 'awaitable_compound_statement');
const Member MEMBER_BINARY_LEFT_OPERAND = tuple(KIND_BINARY_EXPRESSION, 'binary_left_operand');
const Member MEMBER_BINARY_OPERATOR = tuple(KIND_BINARY_EXPRESSION, 'binary_operator');
const Member MEMBER_BINARY_RIGHT_OPERAND = tuple(KIND_BINARY_EXPRESSION, 'binary_right_operand');
const Member MEMBER_BRACED_EXPRESSION_EXPRESSION = tuple(KIND_BRACED_EXPRESSION, 'braced_expression_expression');
const Member MEMBER_BRACED_EXPRESSION_LEFT_BRACE = tuple(KIND_BRACED_EXPRESSION, 'braced_expression_left_brace');
const Member MEMBER_BRACED_EXPRESSION_RIGHT_BRACE = tuple(KIND_BRACED_EXPRESSION, 'braced_expression_right_brace');
const Member MEMBER_BREAK_KEYWORD = tuple(KIND_BREAK_STATEMENT, 'break_keyword');
const Member MEMBER_BREAK_SEMICOLON = tuple(KIND_BREAK_STATEMENT, 'break_semicolon');
const Member MEMBER_CASE_COLON = tuple(KIND_CASE_LABEL, 'case_colon');
const Member MEMBER_CASE_EXPRESSION = tuple(KIND_CASE_LABEL, 'case_expression');
const Member MEMBER_CASE_KEYWORD = tuple(KIND_CASE_LABEL, 'case_keyword');
const Member MEMBER_CAST_LEFT_PAREN = tuple(KIND_CAST_EXPRESSION, 'cast_left_paren');
const Member MEMBER_CAST_OPERAND = tuple(KIND_CAST_EXPRESSION, 'cast_operand');
const Member MEMBER_CAST_RIGHT_PAREN = tuple(KIND_CAST_EXPRESSION, 'cast_right_paren');
const Member MEMBER_CAST_TYPE = tuple(KIND_CAST_EXPRESSION, 'cast_type');
const Member MEMBER_CATCH_BODY = tuple(KIND_CATCH_CLAUSE, 'catch_body');
const Member MEMBER_CATCH_KEYWORD = tuple(KIND_CATCH_CLAUSE, 'catch_keyword');
const Member MEMBER_CATCH_LEFT_PAREN = tuple(KIND_CATCH_CLAUSE, 'catch_left_paren');
const Member MEMBER_CATCH_RIGHT_PAREN = tuple(KIND_CATCH_CLAUSE, 'catch_right_paren');
const Member MEMBER_CATCH_TYPE = tuple(KIND_CATCH_CLAUSE, 'catch_type');
const Member MEMBER_CATCH_VARIABLE = tuple(KIND_CATCH_CLAUSE, 'catch_variable');
const Member MEMBER_CLASSISH_ATTRIBUTE = tuple(KIND_CLASSISH_DECLARATION, 'classish_attribute');
const Member MEMBER_CLASSISH_BODY = tuple(KIND_CLASSISH_DECLARATION, 'classish_body');
const Member MEMBER_CLASSISH_BODY_ELEMENTS = tuple(KIND_CLASSISH_BODY, 'classish_body_elements');
const Member MEMBER_CLASSISH_BODY_LEFT_BRACE = tuple(KIND_CLASSISH_BODY, 'classish_body_left_brace');
const Member MEMBER_CLASSISH_BODY_RIGHT_BRACE = tuple(KIND_CLASSISH_BODY, 'classish_body_right_brace');
const Member MEMBER_CLASSISH_EXTENDS_KEYWORD = tuple(KIND_CLASSISH_DECLARATION, 'classish_extends_keyword');
const Member MEMBER_CLASSISH_EXTENDS_LIST = tuple(KIND_CLASSISH_DECLARATION, 'classish_extends_list');
const Member MEMBER_CLASSISH_IMPLEMENTS_KEYWORD = tuple(KIND_CLASSISH_DECLARATION, 'classish_implements_keyword');
const Member MEMBER_CLASSISH_IMPLEMENTS_LIST = tuple(KIND_CLASSISH_DECLARATION, 'classish_implements_list');
const Member MEMBER_CLASSISH_KEYWORD = tuple(KIND_CLASSISH_DECLARATION, 'classish_keyword');
const Member MEMBER_CLASSISH_MODIFIERS = tuple(KIND_CLASSISH_DECLARATION, 'classish_modifiers');
const Member MEMBER_CLASSISH_NAME = tuple(KIND_CLASSISH_DECLARATION, 'classish_name');
const Member MEMBER_CLASSISH_TYPE_PARAMETERS = tuple(KIND_CLASSISH_DECLARATION, 'classish_type_parameters');
const Member MEMBER_CLASSISH_WHERE_CLAUSE = tuple(KIND_CLASSISH_DECLARATION, 'classish_where_clause');
const Member MEMBER_CLASSISH_XHP = tuple(KIND_CLASSISH_DECLARATION, 'classish_xhp');
const Member MEMBER_CLASSNAME_KEYWORD = tuple(KIND_CLASSNAME_TYPE_SPECIFIER, 'classname_keyword');
const Member MEMBER_CLASSNAME_LEFT_ANGLE = tuple(KIND_CLASSNAME_TYPE_SPECIFIER, 'classname_left_angle');
const Member MEMBER_CLASSNAME_RIGHT_ANGLE = tuple(KIND_CLASSNAME_TYPE_SPECIFIER, 'classname_right_angle');
const Member MEMBER_CLASSNAME_TRAILING_COMMA = tuple(KIND_CLASSNAME_TYPE_SPECIFIER, 'classname_trailing_comma');
const Member MEMBER_CLASSNAME_TYPE = tuple(KIND_CLASSNAME_TYPE_SPECIFIER, 'classname_type');
const Member MEMBER_CLOSURE_COLON = tuple(KIND_CLOSURE_TYPE_SPECIFIER, 'closure_colon');
const Member MEMBER_CLOSURE_CONTEXTS = tuple(KIND_CLOSURE_TYPE_SPECIFIER, 'closure_contexts');
const Member MEMBER_CLOSURE_FUNCTION_KEYWORD = tuple(KIND_CLOSURE_TYPE_SPECIFIER, 'closure_function_keyword');
const Member MEMBER_CLOSURE_INNER_LEFT_PAREN = tuple(KIND_CLOSURE_TYPE_SPECIFIER, 'closure_inner_left_paren');
const Member MEMBER_CLOSURE_INNER_RIGHT_PAREN = tuple(KIND_CLOSURE_TYPE_SPECIFIER, 'closure_inner_right_paren');
const Member MEMBER_CLOSURE_OUTER_LEFT_PAREN = tuple(KIND_CLOSURE_TYPE_SPECIFIER, 'closure_outer_left_paren');
const Member MEMBER_CLOSURE_OUTER_RIGHT_PAREN = tuple(KIND_CLOSURE_TYPE_SPECIFIER, 'closure_outer_right_paren');
const Member MEMBER_CLOSURE_PARAMETER_CALL_CONVENTION = tuple(KIND_CLOSURE_PARAMETER_TYPE_SPECIFIER, 'closure_parameter_call_convention');
const Member MEMBER_CLOSURE_PARAMETER_LIST = tuple(KIND_CLOSURE_TYPE_SPECIFIER, 'closure_parameter_list');
const Member MEMBER_CLOSURE_PARAMETER_READONLY = tuple(KIND_CLOSURE_PARAMETER_TYPE_SPECIFIER, 'closure_parameter_readonly');
const Member MEMBER_CLOSURE_PARAMETER_TYPE = tuple(KIND_CLOSURE_PARAMETER_TYPE_SPECIFIER, 'closure_parameter_type');
const Member MEMBER_CLOSURE_READONLY_KEYWORD = tuple(KIND_CLOSURE_TYPE_SPECIFIER, 'closure_readonly_keyword');
const Member MEMBER_CLOSURE_READONLY_RETURN = tuple(KIND_CLOSURE_TYPE_SPECIFIER, 'closure_readonly_return');
const Member MEMBER_CLOSURE_RETURN_TYPE = tuple(KIND_CLOSURE_TYPE_SPECIFIER, 'closure_return_type');
const Member MEMBER_COLLECTION_LITERAL_INITIALIZERS = tuple(KIND_COLLECTION_LITERAL_EXPRESSION, 'collection_literal_initializers');
const Member MEMBER_COLLECTION_LITERAL_LEFT_BRACE = tuple(KIND_COLLECTION_LITERAL_EXPRESSION, 'collection_literal_left_brace');
const Member MEMBER_COLLECTION_LITERAL_NAME = tuple(KIND_COLLECTION_LITERAL_EXPRESSION, 'collection_literal_name');
const Member MEMBER_COLLECTION_LITERAL_RIGHT_BRACE = tuple(KIND_COLLECTION_LITERAL_EXPRESSION, 'collection_literal_right_brace');
const Member MEMBER_COMPOUND_LEFT_BRACE = tuple(KIND_COMPOUND_STATEMENT, 'compound_left_brace');
const Member MEMBER_COMPOUND_RIGHT_BRACE = tuple(KIND_COMPOUND_STATEMENT, 'compound_right_brace');
const Member MEMBER_COMPOUND_STATEMENTS = tuple(KIND_COMPOUND_STATEMENT, 'compound_statements');
const Member MEMBER_CONCURRENT_KEYWORD = tuple(KIND_CONCURRENT_STATEMENT, 'concurrent_keyword');
const Member MEMBER_CONCURRENT_STATEMENT = tuple(KIND_CONCURRENT_STATEMENT, 'concurrent_statement');
const Member MEMBER_CONDITIONAL_ALTERNATIVE = tuple(KIND_CONDITIONAL_EXPRESSION, 'conditional_alternative');
const Member MEMBER_CONDITIONAL_COLON = tuple(KIND_CONDITIONAL_EXPRESSION, 'conditional_colon');
const Member MEMBER_CONDITIONAL_CONSEQUENCE = tuple(KIND_CONDITIONAL_EXPRESSION, 'conditional_consequence');
const Member MEMBER_CONDITIONAL_QUESTION = tuple(KIND_CONDITIONAL_EXPRESSION, 'conditional_question');
const Member MEMBER_CONDITIONAL_TEST = tuple(KIND_CONDITIONAL_EXPRESSION, 'conditional_test');
const Member MEMBER_CONST_ATTRIBUTE_SPEC = tuple(KIND_CONST_DECLARATION, 'const_attribute_spec');
const Member MEMBER_CONST_DECLARATORS = tuple(KIND_CONST_DECLARATION, 'const_declarators');
const Member MEMBER_CONST_KEYWORD = tuple(KIND_CONST_DECLARATION, 'const_keyword');
const Member MEMBER_CONST_MODIFIERS = tuple(KIND_CONST_DECLARATION, 'const_modifiers');
const Member MEMBER_CONST_SEMICOLON = tuple(KIND_CONST_DECLARATION, 'const_semicolon');
const Member MEMBER_CONST_TYPE_SPECIFIER = tuple(KIND_CONST_DECLARATION, 'const_type_specifier');
const Member MEMBER_CONSTANT_DECLARATOR_INITIALIZER = tuple(KIND_CONSTANT_DECLARATOR, 'constant_declarator_initializer');
const Member MEMBER_CONSTANT_DECLARATOR_NAME = tuple(KIND_CONSTANT_DECLARATOR, 'constant_declarator_name');
const Member MEMBER_CONSTRAINT_KEYWORD = tuple(KIND_TYPE_CONSTRAINT, 'constraint_keyword');
const Member MEMBER_CONSTRAINT_TYPE = tuple(KIND_TYPE_CONSTRAINT, 'constraint_type');
const Member MEMBER_CONSTRUCTOR_CALL_ARGUMENT_LIST = tuple(KIND_CONSTRUCTOR_CALL, 'constructor_call_argument_list');
const Member MEMBER_CONSTRUCTOR_CALL_LEFT_PAREN = tuple(KIND_CONSTRUCTOR_CALL, 'constructor_call_left_paren');
const Member MEMBER_CONSTRUCTOR_CALL_RIGHT_PAREN = tuple(KIND_CONSTRUCTOR_CALL, 'constructor_call_right_paren');
const Member MEMBER_CONSTRUCTOR_CALL_TYPE = tuple(KIND_CONSTRUCTOR_CALL, 'constructor_call_type');
const Member MEMBER_CONTEXT_CONST_CONST_KEYWORD = tuple(KIND_CONTEXT_CONST_DECLARATION, 'context_const_const_keyword');
const Member MEMBER_CONTEXT_CONST_CONSTRAINT = tuple(KIND_CONTEXT_CONST_DECLARATION, 'context_const_constraint');
const Member MEMBER_CONTEXT_CONST_CTX_KEYWORD = tuple(KIND_CONTEXT_CONST_DECLARATION, 'context_const_ctx_keyword');
const Member MEMBER_CONTEXT_CONST_CTX_LIST = tuple(KIND_CONTEXT_CONST_DECLARATION, 'context_const_ctx_list');
const Member MEMBER_CONTEXT_CONST_EQUAL = tuple(KIND_CONTEXT_CONST_DECLARATION, 'context_const_equal');
const Member MEMBER_CONTEXT_CONST_MODIFIERS = tuple(KIND_CONTEXT_CONST_DECLARATION, 'context_const_modifiers');
const Member MEMBER_CONTEXT_CONST_NAME = tuple(KIND_CONTEXT_CONST_DECLARATION, 'context_const_name');
const Member MEMBER_CONTEXT_CONST_SEMICOLON = tuple(KIND_CONTEXT_CONST_DECLARATION, 'context_const_semicolon');
const Member MEMBER_CONTEXT_CONST_TYPE_PARAMETERS = tuple(KIND_CONTEXT_CONST_DECLARATION, 'context_const_type_parameters');
const Member MEMBER_CONTEXTS_LEFT_BRACKET = tuple(KIND_CONTEXTS, 'contexts_left_bracket');
const Member MEMBER_CONTEXTS_RIGHT_BRACKET = tuple(KIND_CONTEXTS, 'contexts_right_bracket');
const Member MEMBER_CONTEXTS_TYPES = tuple(KIND_CONTEXTS, 'contexts_types');
const Member MEMBER_CONTINUE_KEYWORD = tuple(KIND_CONTINUE_STATEMENT, 'continue_keyword');
const Member MEMBER_CONTINUE_SEMICOLON = tuple(KIND_CONTINUE_STATEMENT, 'continue_semicolon');
const Member MEMBER_CTX_ALIAS_AS_CONSTRAINT = tuple(KIND_CONTEXT_ALIAS_DECLARATION, 'ctx_alias_as_constraint');
const Member MEMBER_CTX_ALIAS_ATTRIBUTE_SPEC = tuple(KIND_CONTEXT_ALIAS_DECLARATION, 'ctx_alias_attribute_spec');
const Member MEMBER_CTX_ALIAS_CONTEXT = tuple(KIND_CONTEXT_ALIAS_DECLARATION, 'ctx_alias_context');
const Member MEMBER_CTX_ALIAS_EQUAL = tuple(KIND_CONTEXT_ALIAS_DECLARATION, 'ctx_alias_equal');
const Member MEMBER_CTX_ALIAS_GENERIC_PARAMETER = tuple(KIND_CONTEXT_ALIAS_DECLARATION, 'ctx_alias_generic_parameter');
const Member MEMBER_CTX_ALIAS_KEYWORD = tuple(KIND_CONTEXT_ALIAS_DECLARATION, 'ctx_alias_keyword');
const Member MEMBER_CTX_ALIAS_NAME = tuple(KIND_CONTEXT_ALIAS_DECLARATION, 'ctx_alias_name');
const Member MEMBER_CTX_ALIAS_SEMICOLON = tuple(KIND_CONTEXT_ALIAS_DECLARATION, 'ctx_alias_semicolon');
const Member MEMBER_CTX_CONSTRAINT_CTX_LIST = tuple(KIND_CONTEXT_CONSTRAINT, 'ctx_constraint_ctx_list');
const Member MEMBER_CTX_CONSTRAINT_KEYWORD = tuple(KIND_CONTEXT_CONSTRAINT, 'ctx_constraint_keyword');
const Member MEMBER_CTX_IN_REFINEMENT_CONSTRAINTS = tuple(KIND_CTX_IN_REFINEMENT, 'ctx_in_refinement_constraints');
const Member MEMBER_CTX_IN_REFINEMENT_CTX_LIST = tuple(KIND_CTX_IN_REFINEMENT, 'ctx_in_refinement_ctx_list');
const Member MEMBER_CTX_IN_REFINEMENT_EQUAL = tuple(KIND_CTX_IN_REFINEMENT, 'ctx_in_refinement_equal');
const Member MEMBER_CTX_IN_REFINEMENT_KEYWORD = tuple(KIND_CTX_IN_REFINEMENT, 'ctx_in_refinement_keyword');
const Member MEMBER_CTX_IN_REFINEMENT_NAME = tuple(KIND_CTX_IN_REFINEMENT, 'ctx_in_refinement_name');
const Member MEMBER_CTX_IN_REFINEMENT_TYPE_PARAMETERS = tuple(KIND_CTX_IN_REFINEMENT, 'ctx_in_refinement_type_parameters');
const Member MEMBER_DARRAY_COMMA = tuple(KIND_DARRAY_TYPE_SPECIFIER, 'darray_comma');
const Member MEMBER_DARRAY_INTRINSIC_EXPLICIT_TYPE = tuple(KIND_DARRAY_INTRINSIC_EXPRESSION, 'darray_intrinsic_explicit_type');
const Member MEMBER_DARRAY_INTRINSIC_KEYWORD = tuple(KIND_DARRAY_INTRINSIC_EXPRESSION, 'darray_intrinsic_keyword');
const Member MEMBER_DARRAY_INTRINSIC_LEFT_BRACKET = tuple(KIND_DARRAY_INTRINSIC_EXPRESSION, 'darray_intrinsic_left_bracket');
const Member MEMBER_DARRAY_INTRINSIC_MEMBERS = tuple(KIND_DARRAY_INTRINSIC_EXPRESSION, 'darray_intrinsic_members');
const Member MEMBER_DARRAY_INTRINSIC_RIGHT_BRACKET = tuple(KIND_DARRAY_INTRINSIC_EXPRESSION, 'darray_intrinsic_right_bracket');
const Member MEMBER_DARRAY_KEY = tuple(KIND_DARRAY_TYPE_SPECIFIER, 'darray_key');
const Member MEMBER_DARRAY_KEYWORD = tuple(KIND_DARRAY_TYPE_SPECIFIER, 'darray_keyword');
const Member MEMBER_DARRAY_LEFT_ANGLE = tuple(KIND_DARRAY_TYPE_SPECIFIER, 'darray_left_angle');
const Member MEMBER_DARRAY_RIGHT_ANGLE = tuple(KIND_DARRAY_TYPE_SPECIFIER, 'darray_right_angle');
const Member MEMBER_DARRAY_TRAILING_COMMA = tuple(KIND_DARRAY_TYPE_SPECIFIER, 'darray_trailing_comma');
const Member MEMBER_DARRAY_VALUE = tuple(KIND_DARRAY_TYPE_SPECIFIER, 'darray_value');
const Member MEMBER_DECORATED_EXPRESSION_DECORATOR = tuple(KIND_DECORATED_EXPRESSION, 'decorated_expression_decorator');
const Member MEMBER_DECORATED_EXPRESSION_EXPRESSION = tuple(KIND_DECORATED_EXPRESSION, 'decorated_expression_expression');
const Member MEMBER_DEFAULT_COLON = tuple(KIND_DEFAULT_LABEL, 'default_colon');
const Member MEMBER_DEFAULT_KEYWORD = tuple(KIND_DEFAULT_LABEL, 'default_keyword');
const Member MEMBER_DEFINE_ARGUMENT_LIST = tuple(KIND_DEFINE_EXPRESSION, 'define_argument_list');
const Member MEMBER_DEFINE_KEYWORD = tuple(KIND_DEFINE_EXPRESSION, 'define_keyword');
const Member MEMBER_DEFINE_LEFT_PAREN = tuple(KIND_DEFINE_EXPRESSION, 'define_left_paren');
const Member MEMBER_DEFINE_RIGHT_PAREN = tuple(KIND_DEFINE_EXPRESSION, 'define_right_paren');
const Member MEMBER_DICTIONARY_INTRINSIC_EXPLICIT_TYPE = tuple(KIND_DICTIONARY_INTRINSIC_EXPRESSION, 'dictionary_intrinsic_explicit_type');
const Member MEMBER_DICTIONARY_INTRINSIC_KEYWORD = tuple(KIND_DICTIONARY_INTRINSIC_EXPRESSION, 'dictionary_intrinsic_keyword');
const Member MEMBER_DICTIONARY_INTRINSIC_LEFT_BRACKET = tuple(KIND_DICTIONARY_INTRINSIC_EXPRESSION, 'dictionary_intrinsic_left_bracket');
const Member MEMBER_DICTIONARY_INTRINSIC_MEMBERS = tuple(KIND_DICTIONARY_INTRINSIC_EXPRESSION, 'dictionary_intrinsic_members');
const Member MEMBER_DICTIONARY_INTRINSIC_RIGHT_BRACKET = tuple(KIND_DICTIONARY_INTRINSIC_EXPRESSION, 'dictionary_intrinsic_right_bracket');
const Member MEMBER_DICTIONARY_TYPE_KEYWORD = tuple(KIND_DICTIONARY_TYPE_SPECIFIER, 'dictionary_type_keyword');
const Member MEMBER_DICTIONARY_TYPE_LEFT_ANGLE = tuple(KIND_DICTIONARY_TYPE_SPECIFIER, 'dictionary_type_left_angle');
const Member MEMBER_DICTIONARY_TYPE_MEMBERS = tuple(KIND_DICTIONARY_TYPE_SPECIFIER, 'dictionary_type_members');
const Member MEMBER_DICTIONARY_TYPE_RIGHT_ANGLE = tuple(KIND_DICTIONARY_TYPE_SPECIFIER, 'dictionary_type_right_angle');
const Member MEMBER_DO_BODY = tuple(KIND_DO_STATEMENT, 'do_body');
const Member MEMBER_DO_CONDITION = tuple(KIND_DO_STATEMENT, 'do_condition');
const Member MEMBER_DO_KEYWORD = tuple(KIND_DO_STATEMENT, 'do_keyword');
const Member MEMBER_DO_LEFT_PAREN = tuple(KIND_DO_STATEMENT, 'do_left_paren');
const Member MEMBER_DO_RIGHT_PAREN = tuple(KIND_DO_STATEMENT, 'do_right_paren');
const Member MEMBER_DO_SEMICOLON = tuple(KIND_DO_STATEMENT, 'do_semicolon');
const Member MEMBER_DO_WHILE_KEYWORD = tuple(KIND_DO_STATEMENT, 'do_while_keyword');
const Member MEMBER_ECHO_EXPRESSIONS = tuple(KIND_ECHO_STATEMENT, 'echo_expressions');
const Member MEMBER_ECHO_KEYWORD = tuple(KIND_ECHO_STATEMENT, 'echo_keyword');
const Member MEMBER_ECHO_SEMICOLON = tuple(KIND_ECHO_STATEMENT, 'echo_semicolon');
const Member MEMBER_ELEMENT_ARROW = tuple(KIND_ELEMENT_INITIALIZER, 'element_arrow');
const Member MEMBER_ELEMENT_KEY = tuple(KIND_ELEMENT_INITIALIZER, 'element_key');
const Member MEMBER_ELEMENT_VALUE = tuple(KIND_ELEMENT_INITIALIZER, 'element_value');
const Member MEMBER_ELSE_KEYWORD = tuple(KIND_ELSE_CLAUSE, 'else_keyword');
const Member MEMBER_ELSE_STATEMENT = tuple(KIND_ELSE_CLAUSE, 'else_statement');
const Member MEMBER_ELSEIF_CONDITION = tuple(KIND_ELSEIF_CLAUSE, 'elseif_condition');
const Member MEMBER_ELSEIF_KEYWORD = tuple(KIND_ELSEIF_CLAUSE, 'elseif_keyword');
const Member MEMBER_ELSEIF_LEFT_PAREN = tuple(KIND_ELSEIF_CLAUSE, 'elseif_left_paren');
const Member MEMBER_ELSEIF_RIGHT_PAREN = tuple(KIND_ELSEIF_CLAUSE, 'elseif_right_paren');
const Member MEMBER_ELSEIF_STATEMENT = tuple(KIND_ELSEIF_CLAUSE, 'elseif_statement');
const Member MEMBER_EMBEDDED_BRACED_EXPRESSION_EXPRESSION = tuple(KIND_EMBEDDED_BRACED_EXPRESSION, 'embedded_braced_expression_expression');
const Member MEMBER_EMBEDDED_BRACED_EXPRESSION_LEFT_BRACE = tuple(KIND_EMBEDDED_BRACED_EXPRESSION, 'embedded_braced_expression_left_brace');
const Member MEMBER_EMBEDDED_BRACED_EXPRESSION_RIGHT_BRACE = tuple(KIND_EMBEDDED_BRACED_EXPRESSION, 'embedded_braced_expression_right_brace');
const Member MEMBER_EMBEDDED_MEMBER_NAME = tuple(KIND_EMBEDDED_MEMBER_SELECTION_EXPRESSION, 'embedded_member_name');
const Member MEMBER_EMBEDDED_MEMBER_OBJECT = tuple(KIND_EMBEDDED_MEMBER_SELECTION_EXPRESSION, 'embedded_member_object');
const Member MEMBER_EMBEDDED_MEMBER_OPERATOR = tuple(KIND_EMBEDDED_MEMBER_SELECTION_EXPRESSION, 'embedded_member_operator');
const Member MEMBER_EMBEDDED_SUBSCRIPT_INDEX = tuple(KIND_EMBEDDED_SUBSCRIPT_EXPRESSION, 'embedded_subscript_index');
const Member MEMBER_EMBEDDED_SUBSCRIPT_LEFT_BRACKET = tuple(KIND_EMBEDDED_SUBSCRIPT_EXPRESSION, 'embedded_subscript_left_bracket');
const Member MEMBER_EMBEDDED_SUBSCRIPT_RECEIVER = tuple(KIND_EMBEDDED_SUBSCRIPT_EXPRESSION, 'embedded_subscript_receiver');
const Member MEMBER_EMBEDDED_SUBSCRIPT_RIGHT_BRACKET = tuple(KIND_EMBEDDED_SUBSCRIPT_EXPRESSION, 'embedded_subscript_right_bracket');
const Member MEMBER_END_OF_FILE_TOKEN = tuple(KIND_END_OF_FILE, 'end_of_file_token');
const Member MEMBER_ENUM_ATOM_EXPRESSION = tuple(KIND_ENUM_ATOM_EXPRESSION, 'enum_atom_expression');
const Member MEMBER_ENUM_ATOM_HASH = tuple(KIND_ENUM_ATOM_EXPRESSION, 'enum_atom_hash');
const Member MEMBER_ENUM_ATTRIBUTE_SPEC = tuple(KIND_ENUM_DECLARATION, 'enum_attribute_spec');
const Member MEMBER_ENUM_BASE = tuple(KIND_ENUM_DECLARATION, 'enum_base');
const Member MEMBER_ENUM_CLASS_ATTRIBUTE_SPEC = tuple(KIND_ENUM_CLASS_DECLARATION, 'enum_class_attribute_spec');
const Member MEMBER_ENUM_CLASS_BASE = tuple(KIND_ENUM_CLASS_DECLARATION, 'enum_class_base');
const Member MEMBER_ENUM_CLASS_CLASS_KEYWORD = tuple(KIND_ENUM_CLASS_DECLARATION, 'enum_class_class_keyword');
const Member MEMBER_ENUM_CLASS_COLON = tuple(KIND_ENUM_CLASS_DECLARATION, 'enum_class_colon');
const Member MEMBER_ENUM_CLASS_ELEMENTS = tuple(KIND_ENUM_CLASS_DECLARATION, 'enum_class_elements');
const Member MEMBER_ENUM_CLASS_ENUM_KEYWORD = tuple(KIND_ENUM_CLASS_DECLARATION, 'enum_class_enum_keyword');
const Member MEMBER_ENUM_CLASS_ENUMERATOR_EQUAL = tuple(KIND_ENUM_CLASS_ENUMERATOR, 'enum_class_enumerator_equal');
const Member MEMBER_ENUM_CLASS_ENUMERATOR_INITIAL_VALUE = tuple(KIND_ENUM_CLASS_ENUMERATOR, 'enum_class_enumerator_initial_value');
const Member MEMBER_ENUM_CLASS_ENUMERATOR_INITIALIZER = tuple(KIND_ENUM_CLASS_ENUMERATOR, 'enum_class_enumerator_initializer');
const Member MEMBER_ENUM_CLASS_ENUMERATOR_MODIFIERS = tuple(KIND_ENUM_CLASS_ENUMERATOR, 'enum_class_enumerator_modifiers');
const Member MEMBER_ENUM_CLASS_ENUMERATOR_NAME = tuple(KIND_ENUM_CLASS_ENUMERATOR, 'enum_class_enumerator_name');
const Member MEMBER_ENUM_CLASS_ENUMERATOR_SEMICOLON = tuple(KIND_ENUM_CLASS_ENUMERATOR, 'enum_class_enumerator_semicolon');
const Member MEMBER_ENUM_CLASS_ENUMERATOR_TYPE = tuple(KIND_ENUM_CLASS_ENUMERATOR, 'enum_class_enumerator_type');
const Member MEMBER_ENUM_CLASS_EXTENDS = tuple(KIND_ENUM_CLASS_DECLARATION, 'enum_class_extends');
const Member MEMBER_ENUM_CLASS_EXTENDS_LIST = tuple(KIND_ENUM_CLASS_DECLARATION, 'enum_class_extends_list');
const Member MEMBER_ENUM_CLASS_LABEL_EXPRESSION = tuple(KIND_ENUM_CLASS_LABEL_EXPRESSION, 'enum_class_label_expression');
const Member MEMBER_ENUM_CLASS_LABEL_HASH = tuple(KIND_ENUM_CLASS_LABEL_EXPRESSION, 'enum_class_label_hash');
const Member MEMBER_ENUM_CLASS_LABEL_QUALIFIER = tuple(KIND_ENUM_CLASS_LABEL_EXPRESSION, 'enum_class_label_qualifier');
const Member MEMBER_ENUM_CLASS_LEFT_BRACE = tuple(KIND_ENUM_CLASS_DECLARATION, 'enum_class_left_brace');
const Member MEMBER_ENUM_CLASS_MODIFIERS = tuple(KIND_ENUM_CLASS_DECLARATION, 'enum_class_modifiers');
const Member MEMBER_ENUM_CLASS_NAME = tuple(KIND_ENUM_CLASS_DECLARATION, 'enum_class_name');
const Member MEMBER_ENUM_CLASS_RIGHT_BRACE = tuple(KIND_ENUM_CLASS_DECLARATION, 'enum_class_right_brace');
const Member MEMBER_ENUM_COLON = tuple(KIND_ENUM_DECLARATION, 'enum_colon');
const Member MEMBER_ENUM_ENUMERATORS = tuple(KIND_ENUM_DECLARATION, 'enum_enumerators');
const Member MEMBER_ENUM_KEYWORD = tuple(KIND_ENUM_DECLARATION, 'enum_keyword');
const Member MEMBER_ENUM_LEFT_BRACE = tuple(KIND_ENUM_DECLARATION, 'enum_left_brace');
const Member MEMBER_ENUM_MODIFIERS = tuple(KIND_ENUM_DECLARATION, 'enum_modifiers');
const Member MEMBER_ENUM_NAME = tuple(KIND_ENUM_DECLARATION, 'enum_name');
const Member MEMBER_ENUM_RIGHT_BRACE = tuple(KIND_ENUM_DECLARATION, 'enum_right_brace');
const Member MEMBER_ENUM_TYPE = tuple(KIND_ENUM_DECLARATION, 'enum_type');
const Member MEMBER_ENUM_USE_CLAUSES = tuple(KIND_ENUM_DECLARATION, 'enum_use_clauses');
const Member MEMBER_ENUM_USE_KEYWORD = tuple(KIND_ENUM_USE, 'enum_use_keyword');
const Member MEMBER_ENUM_USE_NAMES = tuple(KIND_ENUM_USE, 'enum_use_names');
const Member MEMBER_ENUM_USE_SEMICOLON = tuple(KIND_ENUM_USE, 'enum_use_semicolon');
const Member MEMBER_ENUMERATOR_EQUAL = tuple(KIND_ENUMERATOR, 'enumerator_equal');
const Member MEMBER_ENUMERATOR_NAME = tuple(KIND_ENUMERATOR, 'enumerator_name');
const Member MEMBER_ENUMERATOR_SEMICOLON = tuple(KIND_ENUMERATOR, 'enumerator_semicolon');
const Member MEMBER_ENUMERATOR_VALUE = tuple(KIND_ENUMERATOR, 'enumerator_value');
const Member MEMBER_ERROR_ERROR = tuple(KIND_ERROR_SYNTAX, 'error_error');
const Member MEMBER_ET_SPLICE_EXPRESSION_DOLLAR = tuple(KIND_ETSPLICE_EXPRESSION, 'et_splice_expression_dollar');
const Member MEMBER_ET_SPLICE_EXPRESSION_EXPRESSION = tuple(KIND_ETSPLICE_EXPRESSION, 'et_splice_expression_expression');
const Member MEMBER_ET_SPLICE_EXPRESSION_LEFT_BRACE = tuple(KIND_ETSPLICE_EXPRESSION, 'et_splice_expression_left_brace');
const Member MEMBER_ET_SPLICE_EXPRESSION_RIGHT_BRACE = tuple(KIND_ETSPLICE_EXPRESSION, 'et_splice_expression_right_brace');
const Member MEMBER_EVAL_ARGUMENT = tuple(KIND_EVAL_EXPRESSION, 'eval_argument');
const Member MEMBER_EVAL_KEYWORD = tuple(KIND_EVAL_EXPRESSION, 'eval_keyword');
const Member MEMBER_EVAL_LEFT_PAREN = tuple(KIND_EVAL_EXPRESSION, 'eval_left_paren');
const Member MEMBER_EVAL_RIGHT_PAREN = tuple(KIND_EVAL_EXPRESSION, 'eval_right_paren');
const Member MEMBER_EXPRESSION_STATEMENT_EXPRESSION = tuple(KIND_EXPRESSION_STATEMENT, 'expression_statement_expression');
const Member MEMBER_EXPRESSION_STATEMENT_SEMICOLON = tuple(KIND_EXPRESSION_STATEMENT, 'expression_statement_semicolon');
const Member MEMBER_FALLTHROUGH_KEYWORD = tuple(KIND_SWITCH_FALLTHROUGH, 'fallthrough_keyword');
const Member MEMBER_FALLTHROUGH_SEMICOLON = tuple(KIND_SWITCH_FALLTHROUGH, 'fallthrough_semicolon');
const Member MEMBER_FIELD_ARROW = tuple(KIND_FIELD_SPECIFIER, 'field_arrow');
const Member MEMBER_FIELD_INITIALIZER_ARROW = tuple(KIND_FIELD_INITIALIZER, 'field_initializer_arrow');
const Member MEMBER_FIELD_INITIALIZER_NAME = tuple(KIND_FIELD_INITIALIZER, 'field_initializer_name');
const Member MEMBER_FIELD_INITIALIZER_VALUE = tuple(KIND_FIELD_INITIALIZER, 'field_initializer_value');
const Member MEMBER_FIELD_NAME = tuple(KIND_FIELD_SPECIFIER, 'field_name');
const Member MEMBER_FIELD_QUESTION = tuple(KIND_FIELD_SPECIFIER, 'field_question');
const Member MEMBER_FIELD_TYPE = tuple(KIND_FIELD_SPECIFIER, 'field_type');
const Member MEMBER_FILE_ATTRIBUTE_SPECIFICATION_ATTRIBUTES = tuple(KIND_FILE_ATTRIBUTE_SPECIFICATION, 'file_attribute_specification_attributes');
const Member MEMBER_FILE_ATTRIBUTE_SPECIFICATION_COLON = tuple(KIND_FILE_ATTRIBUTE_SPECIFICATION, 'file_attribute_specification_colon');
const Member MEMBER_FILE_ATTRIBUTE_SPECIFICATION_KEYWORD = tuple(KIND_FILE_ATTRIBUTE_SPECIFICATION, 'file_attribute_specification_keyword');
const Member MEMBER_FILE_ATTRIBUTE_SPECIFICATION_LEFT_DOUBLE_ANGLE = tuple(KIND_FILE_ATTRIBUTE_SPECIFICATION, 'file_attribute_specification_left_double_angle');
const Member MEMBER_FILE_ATTRIBUTE_SPECIFICATION_RIGHT_DOUBLE_ANGLE = tuple(KIND_FILE_ATTRIBUTE_SPECIFICATION, 'file_attribute_specification_right_double_angle');
const Member MEMBER_FINALLY_BODY = tuple(KIND_FINALLY_CLAUSE, 'finally_body');
const Member MEMBER_FINALLY_KEYWORD = tuple(KIND_FINALLY_CLAUSE, 'finally_keyword');
const Member MEMBER_FOR_BODY = tuple(KIND_FOR_STATEMENT, 'for_body');
const Member MEMBER_FOR_CONTROL = tuple(KIND_FOR_STATEMENT, 'for_control');
const Member MEMBER_FOR_END_OF_LOOP = tuple(KIND_FOR_STATEMENT, 'for_end_of_loop');
const Member MEMBER_FOR_FIRST_SEMICOLON = tuple(KIND_FOR_STATEMENT, 'for_first_semicolon');
const Member MEMBER_FOR_INITIALIZER = tuple(KIND_FOR_STATEMENT, 'for_initializer');
const Member MEMBER_FOR_KEYWORD = tuple(KIND_FOR_STATEMENT, 'for_keyword');
const Member MEMBER_FOR_LEFT_PAREN = tuple(KIND_FOR_STATEMENT, 'for_left_paren');
const Member MEMBER_FOR_RIGHT_PAREN = tuple(KIND_FOR_STATEMENT, 'for_right_paren');
const Member MEMBER_FOR_SECOND_SEMICOLON = tuple(KIND_FOR_STATEMENT, 'for_second_semicolon');
const Member MEMBER_FOREACH_ARROW = tuple(KIND_FOREACH_STATEMENT, 'foreach_arrow');
const Member MEMBER_FOREACH_AS = tuple(KIND_FOREACH_STATEMENT, 'foreach_as');
const Member MEMBER_FOREACH_AWAIT_KEYWORD = tuple(KIND_FOREACH_STATEMENT, 'foreach_await_keyword');
const Member MEMBER_FOREACH_BODY = tuple(KIND_FOREACH_STATEMENT, 'foreach_body');
const Member MEMBER_FOREACH_COLLECTION = tuple(KIND_FOREACH_STATEMENT, 'foreach_collection');
const Member MEMBER_FOREACH_KEY = tuple(KIND_FOREACH_STATEMENT, 'foreach_key');
const Member MEMBER_FOREACH_KEYWORD = tuple(KIND_FOREACH_STATEMENT, 'foreach_keyword');
const Member MEMBER_FOREACH_LEFT_PAREN = tuple(KIND_FOREACH_STATEMENT, 'foreach_left_paren');
const Member MEMBER_FOREACH_RIGHT_PAREN = tuple(KIND_FOREACH_STATEMENT, 'foreach_right_paren');
const Member MEMBER_FOREACH_VALUE = tuple(KIND_FOREACH_STATEMENT, 'foreach_value');
const Member MEMBER_FUNCTION_ATTRIBUTE_SPEC = tuple(KIND_FUNCTION_DECLARATION, 'function_attribute_spec');
const Member MEMBER_FUNCTION_BODY = tuple(KIND_FUNCTION_DECLARATION, 'function_body');
const Member MEMBER_FUNCTION_CALL_ARGUMENT_LIST = tuple(KIND_FUNCTION_CALL_EXPRESSION, 'function_call_argument_list');
const Member MEMBER_FUNCTION_CALL_ENUM_ATOM = tuple(KIND_FUNCTION_CALL_EXPRESSION, 'function_call_enum_atom');
const Member MEMBER_FUNCTION_CALL_ENUM_CLASS_LABEL = tuple(KIND_FUNCTION_CALL_EXPRESSION, 'function_call_enum_class_label');
const Member MEMBER_FUNCTION_CALL_LEFT_PAREN = tuple(KIND_FUNCTION_CALL_EXPRESSION, 'function_call_left_paren');
const Member MEMBER_FUNCTION_CALL_RECEIVER = tuple(KIND_FUNCTION_CALL_EXPRESSION, 'function_call_receiver');
const Member MEMBER_FUNCTION_CALL_RIGHT_PAREN = tuple(KIND_FUNCTION_CALL_EXPRESSION, 'function_call_right_paren');
const Member MEMBER_FUNCTION_CALL_TYPE_ARGS = tuple(KIND_FUNCTION_CALL_EXPRESSION, 'function_call_type_args');
const Member MEMBER_FUNCTION_COLON = tuple(KIND_FUNCTION_DECLARATION_HEADER, 'function_colon');
const Member MEMBER_FUNCTION_CONTEXTS = tuple(KIND_FUNCTION_DECLARATION_HEADER, 'function_contexts');
const Member MEMBER_FUNCTION_CTX_TYPE_KEYWORD = tuple(KIND_FUNCTION_CTX_TYPE_SPECIFIER, 'function_ctx_type_keyword');
const Member MEMBER_FUNCTION_CTX_TYPE_VARIABLE = tuple(KIND_FUNCTION_CTX_TYPE_SPECIFIER, 'function_ctx_type_variable');
const Member MEMBER_FUNCTION_DECLARATION_HEADER = tuple(KIND_FUNCTION_DECLARATION, 'function_declaration_header');
const Member MEMBER_FUNCTION_KEYWORD = tuple(KIND_FUNCTION_DECLARATION_HEADER, 'function_keyword');
const Member MEMBER_FUNCTION_LEFT_PAREN = tuple(KIND_FUNCTION_DECLARATION_HEADER, 'function_left_paren');
const Member MEMBER_FUNCTION_MODIFIERS = tuple(KIND_FUNCTION_DECLARATION_HEADER, 'function_modifiers');
const Member MEMBER_FUNCTION_NAME = tuple(KIND_FUNCTION_DECLARATION_HEADER, 'function_name');
const Member MEMBER_FUNCTION_PARAMETER_LIST = tuple(KIND_FUNCTION_DECLARATION_HEADER, 'function_parameter_list');
const Member MEMBER_FUNCTION_POINTER_RECEIVER = tuple(KIND_FUNCTION_POINTER_EXPRESSION, 'function_pointer_receiver');
const Member MEMBER_FUNCTION_POINTER_TYPE_ARGS = tuple(KIND_FUNCTION_POINTER_EXPRESSION, 'function_pointer_type_args');
const Member MEMBER_FUNCTION_READONLY_RETURN = tuple(KIND_FUNCTION_DECLARATION_HEADER, 'function_readonly_return');
const Member MEMBER_FUNCTION_RIGHT_PAREN = tuple(KIND_FUNCTION_DECLARATION_HEADER, 'function_right_paren');
const Member MEMBER_FUNCTION_TYPE = tuple(KIND_FUNCTION_DECLARATION_HEADER, 'function_type');
const Member MEMBER_FUNCTION_TYPE_PARAMETER_LIST = tuple(KIND_FUNCTION_DECLARATION_HEADER, 'function_type_parameter_list');
const Member MEMBER_FUNCTION_WHERE_CLAUSE = tuple(KIND_FUNCTION_DECLARATION_HEADER, 'function_where_clause');
const Member MEMBER_GENERIC_ARGUMENT_LIST = tuple(KIND_GENERIC_TYPE_SPECIFIER, 'generic_argument_list');
const Member MEMBER_GENERIC_CLASS_TYPE = tuple(KIND_GENERIC_TYPE_SPECIFIER, 'generic_class_type');
const Member MEMBER_IF_CONDITION = tuple(KIND_IF_STATEMENT, 'if_condition');
const Member MEMBER_IF_ELSE_CLAUSE = tuple(KIND_IF_STATEMENT, 'if_else_clause');
const Member MEMBER_IF_ELSEIF_CLAUSES = tuple(KIND_IF_STATEMENT, 'if_elseif_clauses');
const Member MEMBER_IF_KEYWORD = tuple(KIND_IF_STATEMENT, 'if_keyword');
const Member MEMBER_IF_LEFT_PAREN = tuple(KIND_IF_STATEMENT, 'if_left_paren');
const Member MEMBER_IF_RIGHT_PAREN = tuple(KIND_IF_STATEMENT, 'if_right_paren');
const Member MEMBER_IF_STATEMENT = tuple(KIND_IF_STATEMENT, 'if_statement');
const Member MEMBER_INCLUSION_EXPRESSION = tuple(KIND_INCLUSION_DIRECTIVE, 'inclusion_expression');
const Member MEMBER_INCLUSION_FILENAME = tuple(KIND_INCLUSION_EXPRESSION, 'inclusion_filename');
const Member MEMBER_INCLUSION_REQUIRE = tuple(KIND_INCLUSION_EXPRESSION, 'inclusion_require');
const Member MEMBER_INCLUSION_SEMICOLON = tuple(KIND_INCLUSION_DIRECTIVE, 'inclusion_semicolon');
const Member MEMBER_INTERSECTION_LEFT_PAREN = tuple(KIND_INTERSECTION_TYPE_SPECIFIER, 'intersection_left_paren');
const Member MEMBER_INTERSECTION_RIGHT_PAREN = tuple(KIND_INTERSECTION_TYPE_SPECIFIER, 'intersection_right_paren');
const Member MEMBER_INTERSECTION_TYPES = tuple(KIND_INTERSECTION_TYPE_SPECIFIER, 'intersection_types');
const Member MEMBER_IS_LEFT_OPERAND = tuple(KIND_IS_EXPRESSION, 'is_left_operand');
const Member MEMBER_IS_OPERATOR = tuple(KIND_IS_EXPRESSION, 'is_operator');
const Member MEMBER_IS_RIGHT_OPERAND = tuple(KIND_IS_EXPRESSION, 'is_right_operand');
const Member MEMBER_ISSET_ARGUMENT_LIST = tuple(KIND_ISSET_EXPRESSION, 'isset_argument_list');
const Member MEMBER_ISSET_KEYWORD = tuple(KIND_ISSET_EXPRESSION, 'isset_keyword');
const Member MEMBER_ISSET_LEFT_PAREN = tuple(KIND_ISSET_EXPRESSION, 'isset_left_paren');
const Member MEMBER_ISSET_RIGHT_PAREN = tuple(KIND_ISSET_EXPRESSION, 'isset_right_paren');
const Member MEMBER_KEYSET_INTRINSIC_EXPLICIT_TYPE = tuple(KIND_KEYSET_INTRINSIC_EXPRESSION, 'keyset_intrinsic_explicit_type');
const Member MEMBER_KEYSET_INTRINSIC_KEYWORD = tuple(KIND_KEYSET_INTRINSIC_EXPRESSION, 'keyset_intrinsic_keyword');
const Member MEMBER_KEYSET_INTRINSIC_LEFT_BRACKET = tuple(KIND_KEYSET_INTRINSIC_EXPRESSION, 'keyset_intrinsic_left_bracket');
const Member MEMBER_KEYSET_INTRINSIC_MEMBERS = tuple(KIND_KEYSET_INTRINSIC_EXPRESSION, 'keyset_intrinsic_members');
const Member MEMBER_KEYSET_INTRINSIC_RIGHT_BRACKET = tuple(KIND_KEYSET_INTRINSIC_EXPRESSION, 'keyset_intrinsic_right_bracket');
const Member MEMBER_KEYSET_TYPE_KEYWORD = tuple(KIND_KEYSET_TYPE_SPECIFIER, 'keyset_type_keyword');
const Member MEMBER_KEYSET_TYPE_LEFT_ANGLE = tuple(KIND_KEYSET_TYPE_SPECIFIER, 'keyset_type_left_angle');
const Member MEMBER_KEYSET_TYPE_RIGHT_ANGLE = tuple(KIND_KEYSET_TYPE_SPECIFIER, 'keyset_type_right_angle');
const Member MEMBER_KEYSET_TYPE_TRAILING_COMMA = tuple(KIND_KEYSET_TYPE_SPECIFIER, 'keyset_type_trailing_comma');
const Member MEMBER_KEYSET_TYPE_TYPE = tuple(KIND_KEYSET_TYPE_SPECIFIER, 'keyset_type_type');
const Member MEMBER_LAMBDA_ARROW = tuple(KIND_LAMBDA_EXPRESSION, 'lambda_arrow');
const Member MEMBER_LAMBDA_ASYNC = tuple(KIND_LAMBDA_EXPRESSION, 'lambda_async');
const Member MEMBER_LAMBDA_ATTRIBUTE_SPEC = tuple(KIND_LAMBDA_EXPRESSION, 'lambda_attribute_spec');
const Member MEMBER_LAMBDA_BODY = tuple(KIND_LAMBDA_EXPRESSION, 'lambda_body');
const Member MEMBER_LAMBDA_COLON = tuple(KIND_LAMBDA_SIGNATURE, 'lambda_colon');
const Member MEMBER_LAMBDA_CONTEXTS = tuple(KIND_LAMBDA_SIGNATURE, 'lambda_contexts');
const Member MEMBER_LAMBDA_LEFT_PAREN = tuple(KIND_LAMBDA_SIGNATURE, 'lambda_left_paren');
const Member MEMBER_LAMBDA_PARAMETERS = tuple(KIND_LAMBDA_SIGNATURE, 'lambda_parameters');
const Member MEMBER_LAMBDA_READONLY_RETURN = tuple(KIND_LAMBDA_SIGNATURE, 'lambda_readonly_return');
const Member MEMBER_LAMBDA_RIGHT_PAREN = tuple(KIND_LAMBDA_SIGNATURE, 'lambda_right_paren');
const Member MEMBER_LAMBDA_SIGNATURE = tuple(KIND_LAMBDA_EXPRESSION, 'lambda_signature');
const Member MEMBER_LAMBDA_TYPE = tuple(KIND_LAMBDA_SIGNATURE, 'lambda_type');
const Member MEMBER_LIKE_TILDE = tuple(KIND_LIKE_TYPE_SPECIFIER, 'like_tilde');
const Member MEMBER_LIKE_TYPE = tuple(KIND_LIKE_TYPE_SPECIFIER, 'like_type');
const Member MEMBER_LIST_ITEM = tuple(KIND_LIST_ITEM, 'list_item');
const Member MEMBER_LIST_KEYWORD = tuple(KIND_LIST_EXPRESSION, 'list_keyword');
const Member MEMBER_LIST_LEFT_PAREN = tuple(KIND_LIST_EXPRESSION, 'list_left_paren');
const Member MEMBER_LIST_MEMBERS = tuple(KIND_LIST_EXPRESSION, 'list_members');
const Member MEMBER_LIST_RIGHT_PAREN = tuple(KIND_LIST_EXPRESSION, 'list_right_paren');
const Member MEMBER_LIST_SEPARATOR = tuple(KIND_LIST_ITEM, 'list_separator');
const Member MEMBER_LITERAL_EXPRESSION = tuple(KIND_LITERAL, 'literal_expression');
const Member MEMBER_MARKUP_HASHBANG = tuple(KIND_MARKUP_SECTION, 'markup_hashbang');
const Member MEMBER_MARKUP_SUFFIX = tuple(KIND_MARKUP_SECTION, 'markup_suffix');
const Member MEMBER_MARKUP_SUFFIX_LESS_THAN_QUESTION = tuple(KIND_MARKUP_SUFFIX, 'markup_suffix_less_than_question');
const Member MEMBER_MARKUP_SUFFIX_NAME = tuple(KIND_MARKUP_SUFFIX, 'markup_suffix_name');
const Member MEMBER_MEMBER_NAME = tuple(KIND_MEMBER_SELECTION_EXPRESSION, 'member_name');
const Member MEMBER_MEMBER_OBJECT = tuple(KIND_MEMBER_SELECTION_EXPRESSION, 'member_object');
const Member MEMBER_MEMBER_OPERATOR = tuple(KIND_MEMBER_SELECTION_EXPRESSION, 'member_operator');
const Member MEMBER_METHODISH_ATTRIBUTE = tuple(KIND_METHODISH_DECLARATION, 'methodish_attribute');
const Member MEMBER_METHODISH_FUNCTION_BODY = tuple(KIND_METHODISH_DECLARATION, 'methodish_function_body');
const Member MEMBER_METHODISH_FUNCTION_DECL_HEADER = tuple(KIND_METHODISH_DECLARATION, 'methodish_function_decl_header');
const Member MEMBER_METHODISH_SEMICOLON = tuple(KIND_METHODISH_DECLARATION, 'methodish_semicolon');
const Member MEMBER_METHODISH_TRAIT_ATTRIBUTE = tuple(KIND_METHODISH_TRAIT_RESOLUTION, 'methodish_trait_attribute');
const Member MEMBER_METHODISH_TRAIT_EQUAL = tuple(KIND_METHODISH_TRAIT_RESOLUTION, 'methodish_trait_equal');
const Member MEMBER_METHODISH_TRAIT_FUNCTION_DECL_HEADER = tuple(KIND_METHODISH_TRAIT_RESOLUTION, 'methodish_trait_function_decl_header');
const Member MEMBER_METHODISH_TRAIT_NAME = tuple(KIND_METHODISH_TRAIT_RESOLUTION, 'methodish_trait_name');
const Member MEMBER_METHODISH_TRAIT_SEMICOLON = tuple(KIND_METHODISH_TRAIT_RESOLUTION, 'methodish_trait_semicolon');
const Member MEMBER_MODULE_DECLARATION_ATTRIBUTE_SPEC = tuple(KIND_MODULE_DECLARATION, 'module_declaration_attribute_spec');
const Member MEMBER_MODULE_DECLARATION_EXPORTS = tuple(KIND_MODULE_DECLARATION, 'module_declaration_exports');
const Member MEMBER_MODULE_DECLARATION_IMPORTS = tuple(KIND_MODULE_DECLARATION, 'module_declaration_imports');
const Member MEMBER_MODULE_DECLARATION_KEYWORD = tuple(KIND_MODULE_DECLARATION, 'module_declaration_keyword');
const Member MEMBER_MODULE_DECLARATION_LEFT_BRACE = tuple(KIND_MODULE_DECLARATION, 'module_declaration_left_brace');
const Member MEMBER_MODULE_DECLARATION_MODULE_KEYWORD = tuple(KIND_MODULE_DECLARATION, 'module_declaration_module_keyword');
const Member MEMBER_MODULE_DECLARATION_NAME = tuple(KIND_MODULE_DECLARATION, 'module_declaration_name');
const Member MEMBER_MODULE_DECLARATION_NEW_KEYWORD = tuple(KIND_MODULE_DECLARATION, 'module_declaration_new_keyword');
const Member MEMBER_MODULE_DECLARATION_RIGHT_BRACE = tuple(KIND_MODULE_DECLARATION, 'module_declaration_right_brace');
const Member MEMBER_MODULE_EXPORTS_EXPORTS = tuple(KIND_MODULE_EXPORTS, 'module_exports_exports');
const Member MEMBER_MODULE_EXPORTS_EXPORTS_KEYWORD = tuple(KIND_MODULE_EXPORTS, 'module_exports_exports_keyword');
const Member MEMBER_MODULE_EXPORTS_LEFT_BRACE = tuple(KIND_MODULE_EXPORTS, 'module_exports_left_brace');
const Member MEMBER_MODULE_EXPORTS_RIGHT_BRACE = tuple(KIND_MODULE_EXPORTS, 'module_exports_right_brace');
const Member MEMBER_MODULE_IMPORTS_IMPORTS = tuple(KIND_MODULE_IMPORTS, 'module_imports_imports');
const Member MEMBER_MODULE_IMPORTS_IMPORTS_KEYWORD = tuple(KIND_MODULE_IMPORTS, 'module_imports_imports_keyword');
const Member MEMBER_MODULE_IMPORTS_LEFT_BRACE = tuple(KIND_MODULE_IMPORTS, 'module_imports_left_brace');
const Member MEMBER_MODULE_IMPORTS_RIGHT_BRACE = tuple(KIND_MODULE_IMPORTS, 'module_imports_right_brace');
const Member MEMBER_MODULE_MEMBERSHIP_DECLARATION_MODULE_KEYWORD = tuple(KIND_MODULE_MEMBERSHIP_DECLARATION, 'module_membership_declaration_module_keyword');
const Member MEMBER_MODULE_MEMBERSHIP_DECLARATION_NAME = tuple(KIND_MODULE_MEMBERSHIP_DECLARATION, 'module_membership_declaration_name');
const Member MEMBER_MODULE_MEMBERSHIP_DECLARATION_SEMICOLON = tuple(KIND_MODULE_MEMBERSHIP_DECLARATION, 'module_membership_declaration_semicolon');
const Member MEMBER_MODULE_NAME_PARTS = tuple(KIND_MODULE_NAME, 'module_name_parts');
const Member MEMBER_NAMESPACE_BODY = tuple(KIND_NAMESPACE_DECLARATION, 'namespace_body');
const Member MEMBER_NAMESPACE_DECLARATIONS = tuple(KIND_NAMESPACE_BODY, 'namespace_declarations');
const Member MEMBER_NAMESPACE_GROUP_USE_CLAUSES = tuple(KIND_NAMESPACE_GROUP_USE_DECLARATION, 'namespace_group_use_clauses');
const Member MEMBER_NAMESPACE_GROUP_USE_KEYWORD = tuple(KIND_NAMESPACE_GROUP_USE_DECLARATION, 'namespace_group_use_keyword');
const Member MEMBER_NAMESPACE_GROUP_USE_KIND = tuple(KIND_NAMESPACE_GROUP_USE_DECLARATION, 'namespace_group_use_kind');
const Member MEMBER_NAMESPACE_GROUP_USE_LEFT_BRACE = tuple(KIND_NAMESPACE_GROUP_USE_DECLARATION, 'namespace_group_use_left_brace');
const Member MEMBER_NAMESPACE_GROUP_USE_PREFIX = tuple(KIND_NAMESPACE_GROUP_USE_DECLARATION, 'namespace_group_use_prefix');
const Member MEMBER_NAMESPACE_GROUP_USE_RIGHT_BRACE = tuple(KIND_NAMESPACE_GROUP_USE_DECLARATION, 'namespace_group_use_right_brace');
const Member MEMBER_NAMESPACE_GROUP_USE_SEMICOLON = tuple(KIND_NAMESPACE_GROUP_USE_DECLARATION, 'namespace_group_use_semicolon');
const Member MEMBER_NAMESPACE_HEADER = tuple(KIND_NAMESPACE_DECLARATION, 'namespace_header');
const Member MEMBER_NAMESPACE_KEYWORD = tuple(KIND_NAMESPACE_DECLARATION_HEADER, 'namespace_keyword');
const Member MEMBER_NAMESPACE_LEFT_BRACE = tuple(KIND_NAMESPACE_BODY, 'namespace_left_brace');
const Member MEMBER_NAMESPACE_NAME = tuple(KIND_NAMESPACE_DECLARATION_HEADER, 'namespace_name');
const Member MEMBER_NAMESPACE_RIGHT_BRACE = tuple(KIND_NAMESPACE_BODY, 'namespace_right_brace');
const Member MEMBER_NAMESPACE_SEMICOLON = tuple(KIND_NAMESPACE_EMPTY_BODY, 'namespace_semicolon');
const Member MEMBER_NAMESPACE_USE_ALIAS = tuple(KIND_NAMESPACE_USE_CLAUSE, 'namespace_use_alias');
const Member MEMBER_NAMESPACE_USE_AS = tuple(KIND_NAMESPACE_USE_CLAUSE, 'namespace_use_as');
const Member MEMBER_NAMESPACE_USE_CLAUSE_KIND = tuple(KIND_NAMESPACE_USE_CLAUSE, 'namespace_use_clause_kind');
const Member MEMBER_NAMESPACE_USE_CLAUSES = tuple(KIND_NAMESPACE_USE_DECLARATION, 'namespace_use_clauses');
const Member MEMBER_NAMESPACE_USE_KEYWORD = tuple(KIND_NAMESPACE_USE_DECLARATION, 'namespace_use_keyword');
const Member MEMBER_NAMESPACE_USE_KIND = tuple(KIND_NAMESPACE_USE_DECLARATION, 'namespace_use_kind');
const Member MEMBER_NAMESPACE_USE_NAME = tuple(KIND_NAMESPACE_USE_CLAUSE, 'namespace_use_name');
const Member MEMBER_NAMESPACE_USE_SEMICOLON = tuple(KIND_NAMESPACE_USE_DECLARATION, 'namespace_use_semicolon');
const Member MEMBER_NULLABLE_AS_LEFT_OPERAND = tuple(KIND_NULLABLE_AS_EXPRESSION, 'nullable_as_left_operand');
const Member MEMBER_NULLABLE_AS_OPERATOR = tuple(KIND_NULLABLE_AS_EXPRESSION, 'nullable_as_operator');
const Member MEMBER_NULLABLE_AS_RIGHT_OPERAND = tuple(KIND_NULLABLE_AS_EXPRESSION, 'nullable_as_right_operand');
const Member MEMBER_NULLABLE_QUESTION = tuple(KIND_NULLABLE_TYPE_SPECIFIER, 'nullable_question');
const Member MEMBER_NULLABLE_TYPE = tuple(KIND_NULLABLE_TYPE_SPECIFIER, 'nullable_type');
const Member MEMBER_OBJECT_CREATION_NEW_KEYWORD = tuple(KIND_OBJECT_CREATION_EXPRESSION, 'object_creation_new_keyword');
const Member MEMBER_OBJECT_CREATION_OBJECT = tuple(KIND_OBJECT_CREATION_EXPRESSION, 'object_creation_object');
const Member MEMBER_OLD_ATTRIBUTE_SPECIFICATION_ATTRIBUTES = tuple(KIND_OLD_ATTRIBUTE_SPECIFICATION, 'old_attribute_specification_attributes');
const Member MEMBER_OLD_ATTRIBUTE_SPECIFICATION_LEFT_DOUBLE_ANGLE = tuple(KIND_OLD_ATTRIBUTE_SPECIFICATION, 'old_attribute_specification_left_double_angle');
const Member MEMBER_OLD_ATTRIBUTE_SPECIFICATION_RIGHT_DOUBLE_ANGLE = tuple(KIND_OLD_ATTRIBUTE_SPECIFICATION, 'old_attribute_specification_right_double_angle');
const Member MEMBER_PACKAGE_DECLARATION_ATTRIBUTE_SPEC = tuple(KIND_PACKAGE_DECLARATION, 'package_declaration_attribute_spec');
const Member MEMBER_PACKAGE_DECLARATION_INCLUDES = tuple(KIND_PACKAGE_DECLARATION, 'package_declaration_includes');
const Member MEMBER_PACKAGE_DECLARATION_LEFT_BRACE = tuple(KIND_PACKAGE_DECLARATION, 'package_declaration_left_brace');
const Member MEMBER_PACKAGE_DECLARATION_NAME = tuple(KIND_PACKAGE_DECLARATION, 'package_declaration_name');
const Member MEMBER_PACKAGE_DECLARATION_PACKAGE_KEYWORD = tuple(KIND_PACKAGE_DECLARATION, 'package_declaration_package_keyword');
const Member MEMBER_PACKAGE_DECLARATION_RIGHT_BRACE = tuple(KIND_PACKAGE_DECLARATION, 'package_declaration_right_brace');
const Member MEMBER_PACKAGE_DECLARATION_USES = tuple(KIND_PACKAGE_DECLARATION, 'package_declaration_uses');
const Member MEMBER_PACKAGE_INCLUDES_INCLUDE_KEYWORD = tuple(KIND_PACKAGE_INCLUDES, 'package_includes_include_keyword');
const Member MEMBER_PACKAGE_INCLUDES_INCLUDES = tuple(KIND_PACKAGE_INCLUDES, 'package_includes_includes');
const Member MEMBER_PACKAGE_INCLUDES_LEFT_BRACE = tuple(KIND_PACKAGE_INCLUDES, 'package_includes_left_brace');
const Member MEMBER_PACKAGE_INCLUDES_RIGHT_BRACE = tuple(KIND_PACKAGE_INCLUDES, 'package_includes_right_brace');
const Member MEMBER_PACKAGE_USES_LEFT_BRACE = tuple(KIND_PACKAGE_USES, 'package_uses_left_brace');
const Member MEMBER_PACKAGE_USES_RIGHT_BRACE = tuple(KIND_PACKAGE_USES, 'package_uses_right_brace');
const Member MEMBER_PACKAGE_USES_USE_KEYWORD = tuple(KIND_PACKAGE_USES, 'package_uses_use_keyword');
const Member MEMBER_PACKAGE_USES_USES = tuple(KIND_PACKAGE_USES, 'package_uses_uses');
const Member MEMBER_PARAMETER_ATTRIBUTE = tuple(KIND_PARAMETER_DECLARATION, 'parameter_attribute');
const Member MEMBER_PARAMETER_CALL_CONVENTION = tuple(KIND_PARAMETER_DECLARATION, 'parameter_call_convention');
const Member MEMBER_PARAMETER_DEFAULT_VALUE = tuple(KIND_PARAMETER_DECLARATION, 'parameter_default_value');
const Member MEMBER_PARAMETER_NAME = tuple(KIND_PARAMETER_DECLARATION, 'parameter_name');
const Member MEMBER_PARAMETER_READONLY = tuple(KIND_PARAMETER_DECLARATION, 'parameter_readonly');
const Member MEMBER_PARAMETER_TYPE = tuple(KIND_PARAMETER_DECLARATION, 'parameter_type');
const Member MEMBER_PARAMETER_VISIBILITY = tuple(KIND_PARAMETER_DECLARATION, 'parameter_visibility');
const Member MEMBER_PARENTHESIZED_EXPRESSION_EXPRESSION = tuple(KIND_PARENTHESIZED_EXPRESSION, 'parenthesized_expression_expression');
const Member MEMBER_PARENTHESIZED_EXPRESSION_LEFT_PAREN = tuple(KIND_PARENTHESIZED_EXPRESSION, 'parenthesized_expression_left_paren');
const Member MEMBER_PARENTHESIZED_EXPRESSION_RIGHT_PAREN = tuple(KIND_PARENTHESIZED_EXPRESSION, 'parenthesized_expression_right_paren');
const Member MEMBER_PIPE_VARIABLE_EXPRESSION = tuple(KIND_PIPE_VARIABLE, 'pipe_variable_expression');
const Member MEMBER_POSTFIX_UNARY_OPERAND = tuple(KIND_POSTFIX_UNARY_EXPRESSION, 'postfix_unary_operand');
const Member MEMBER_POSTFIX_UNARY_OPERATOR = tuple(KIND_POSTFIX_UNARY_EXPRESSION, 'postfix_unary_operator');
const Member MEMBER_PREFIX_UNARY_OPERAND = tuple(KIND_PREFIX_UNARY_EXPRESSION, 'prefix_unary_operand');
const Member MEMBER_PREFIX_UNARY_OPERATOR = tuple(KIND_PREFIX_UNARY_EXPRESSION, 'prefix_unary_operator');
const Member MEMBER_PREFIXED_CODE_EXPRESSION = tuple(KIND_PREFIXED_CODE_EXPRESSION, 'prefixed_code_expression');
const Member MEMBER_PREFIXED_CODE_LEFT_BACKTICK = tuple(KIND_PREFIXED_CODE_EXPRESSION, 'prefixed_code_left_backtick');
const Member MEMBER_PREFIXED_CODE_PREFIX = tuple(KIND_PREFIXED_CODE_EXPRESSION, 'prefixed_code_prefix');
const Member MEMBER_PREFIXED_CODE_RIGHT_BACKTICK = tuple(KIND_PREFIXED_CODE_EXPRESSION, 'prefixed_code_right_backtick');
const Member MEMBER_PREFIXED_STRING_NAME = tuple(KIND_PREFIXED_STRING, 'prefixed_string_name');
const Member MEMBER_PREFIXED_STRING_STR = tuple(KIND_PREFIXED_STRING, 'prefixed_string_str');
const Member MEMBER_PROPERTY_ATTRIBUTE_SPEC = tuple(KIND_PROPERTY_DECLARATION, 'property_attribute_spec');
const Member MEMBER_PROPERTY_DECLARATORS = tuple(KIND_PROPERTY_DECLARATION, 'property_declarators');
const Member MEMBER_PROPERTY_INITIALIZER = tuple(KIND_PROPERTY_DECLARATOR, 'property_initializer');
const Member MEMBER_PROPERTY_MODIFIERS = tuple(KIND_PROPERTY_DECLARATION, 'property_modifiers');
const Member MEMBER_PROPERTY_NAME = tuple(KIND_PROPERTY_DECLARATOR, 'property_name');
const Member MEMBER_PROPERTY_SEMICOLON = tuple(KIND_PROPERTY_DECLARATION, 'property_semicolon');
const Member MEMBER_PROPERTY_TYPE = tuple(KIND_PROPERTY_DECLARATION, 'property_type');
const Member MEMBER_QUALIFIED_NAME_PARTS = tuple(KIND_QUALIFIED_NAME, 'qualified_name_parts');
const Member MEMBER_RECORD_ATTRIBUTE_SPEC = tuple(KIND_RECORD_DECLARATION, 'record_attribute_spec');
const Member MEMBER_RECORD_CREATION_LEFT_BRACKET = tuple(KIND_RECORD_CREATION_EXPRESSION, 'record_creation_left_bracket');
const Member MEMBER_RECORD_CREATION_MEMBERS = tuple(KIND_RECORD_CREATION_EXPRESSION, 'record_creation_members');
const Member MEMBER_RECORD_CREATION_RIGHT_BRACKET = tuple(KIND_RECORD_CREATION_EXPRESSION, 'record_creation_right_bracket');
const Member MEMBER_RECORD_CREATION_TYPE = tuple(KIND_RECORD_CREATION_EXPRESSION, 'record_creation_type');
const Member MEMBER_RECORD_EXTENDS_KEYWORD = tuple(KIND_RECORD_DECLARATION, 'record_extends_keyword');
const Member MEMBER_RECORD_EXTENDS_OPT = tuple(KIND_RECORD_DECLARATION, 'record_extends_opt');
const Member MEMBER_RECORD_FIELD_INIT = tuple(KIND_RECORD_FIELD, 'record_field_init');
const Member MEMBER_RECORD_FIELD_NAME = tuple(KIND_RECORD_FIELD, 'record_field_name');
const Member MEMBER_RECORD_FIELD_SEMI = tuple(KIND_RECORD_FIELD, 'record_field_semi');
const Member MEMBER_RECORD_FIELD_TYPE = tuple(KIND_RECORD_FIELD, 'record_field_type');
const Member MEMBER_RECORD_FIELDS = tuple(KIND_RECORD_DECLARATION, 'record_fields');
const Member MEMBER_RECORD_KEYWORD = tuple(KIND_RECORD_DECLARATION, 'record_keyword');
const Member MEMBER_RECORD_LEFT_BRACE = tuple(KIND_RECORD_DECLARATION, 'record_left_brace');
const Member MEMBER_RECORD_MODIFIER = tuple(KIND_RECORD_DECLARATION, 'record_modifier');
const Member MEMBER_RECORD_NAME = tuple(KIND_RECORD_DECLARATION, 'record_name');
const Member MEMBER_RECORD_RIGHT_BRACE = tuple(KIND_RECORD_DECLARATION, 'record_right_brace');
const Member MEMBER_REIFIED_TYPE_ARGUMENT_REIFIED = tuple(KIND_REIFIED_TYPE_ARGUMENT, 'reified_type_argument_reified');
const Member MEMBER_REIFIED_TYPE_ARGUMENT_TYPE = tuple(KIND_REIFIED_TYPE_ARGUMENT, 'reified_type_argument_type');
const Member MEMBER_REQUIRE_KEYWORD = tuple(KIND_REQUIRE_CLAUSE, 'require_keyword');
const Member MEMBER_REQUIRE_KIND = tuple(KIND_REQUIRE_CLAUSE, 'require_kind');
const Member MEMBER_REQUIRE_NAME = tuple(KIND_REQUIRE_CLAUSE, 'require_name');
const Member MEMBER_REQUIRE_SEMICOLON = tuple(KIND_REQUIRE_CLAUSE, 'require_semicolon');
const Member MEMBER_RETURN_EXPRESSION = tuple(KIND_RETURN_STATEMENT, 'return_expression');
const Member MEMBER_RETURN_KEYWORD = tuple(KIND_RETURN_STATEMENT, 'return_keyword');
const Member MEMBER_RETURN_SEMICOLON = tuple(KIND_RETURN_STATEMENT, 'return_semicolon');
const Member MEMBER_SAFE_MEMBER_NAME = tuple(KIND_SAFE_MEMBER_SELECTION_EXPRESSION, 'safe_member_name');
const Member MEMBER_SAFE_MEMBER_OBJECT = tuple(KIND_SAFE_MEMBER_SELECTION_EXPRESSION, 'safe_member_object');
const Member MEMBER_SAFE_MEMBER_OPERATOR = tuple(KIND_SAFE_MEMBER_SELECTION_EXPRESSION, 'safe_member_operator');
const Member MEMBER_SCOPE_RESOLUTION_NAME = tuple(KIND_SCOPE_RESOLUTION_EXPRESSION, 'scope_resolution_name');
const Member MEMBER_SCOPE_RESOLUTION_OPERATOR = tuple(KIND_SCOPE_RESOLUTION_EXPRESSION, 'scope_resolution_operator');
const Member MEMBER_SCOPE_RESOLUTION_QUALIFIER = tuple(KIND_SCOPE_RESOLUTION_EXPRESSION, 'scope_resolution_qualifier');
const Member MEMBER_SCRIPT_DECLARATIONS = tuple(KIND_SCRIPT, 'script_declarations');
const Member MEMBER_SHAPE_EXPRESSION_FIELDS = tuple(KIND_SHAPE_EXPRESSION, 'shape_expression_fields');
const Member MEMBER_SHAPE_EXPRESSION_KEYWORD = tuple(KIND_SHAPE_EXPRESSION, 'shape_expression_keyword');
const Member MEMBER_SHAPE_EXPRESSION_LEFT_PAREN = tuple(KIND_SHAPE_EXPRESSION, 'shape_expression_left_paren');
const Member MEMBER_SHAPE_EXPRESSION_RIGHT_PAREN = tuple(KIND_SHAPE_EXPRESSION, 'shape_expression_right_paren');
const Member MEMBER_SHAPE_TYPE_ELLIPSIS = tuple(KIND_SHAPE_TYPE_SPECIFIER, 'shape_type_ellipsis');
const Member MEMBER_SHAPE_TYPE_FIELDS = tuple(KIND_SHAPE_TYPE_SPECIFIER, 'shape_type_fields');
const Member MEMBER_SHAPE_TYPE_KEYWORD = tuple(KIND_SHAPE_TYPE_SPECIFIER, 'shape_type_keyword');
const Member MEMBER_SHAPE_TYPE_LEFT_PAREN = tuple(KIND_SHAPE_TYPE_SPECIFIER, 'shape_type_left_paren');
const Member MEMBER_SHAPE_TYPE_RIGHT_PAREN = tuple(KIND_SHAPE_TYPE_SPECIFIER, 'shape_type_right_paren');
const Member MEMBER_SIMPLE_INITIALIZER_EQUAL = tuple(KIND_SIMPLE_INITIALIZER, 'simple_initializer_equal');
const Member MEMBER_SIMPLE_INITIALIZER_VALUE = tuple(KIND_SIMPLE_INITIALIZER, 'simple_initializer_value');
const Member MEMBER_SIMPLE_TYPE_SPECIFIER = tuple(KIND_SIMPLE_TYPE_SPECIFIER, 'simple_type_specifier');
const Member MEMBER_SOFT_AT = tuple(KIND_SOFT_TYPE_SPECIFIER, 'soft_at');
const Member MEMBER_SOFT_TYPE = tuple(KIND_SOFT_TYPE_SPECIFIER, 'soft_type');
const Member MEMBER_SUBSCRIPT_INDEX = tuple(KIND_SUBSCRIPT_EXPRESSION, 'subscript_index');
const Member MEMBER_SUBSCRIPT_LEFT_BRACKET = tuple(KIND_SUBSCRIPT_EXPRESSION, 'subscript_left_bracket');
const Member MEMBER_SUBSCRIPT_RECEIVER = tuple(KIND_SUBSCRIPT_EXPRESSION, 'subscript_receiver');
const Member MEMBER_SUBSCRIPT_RIGHT_BRACKET = tuple(KIND_SUBSCRIPT_EXPRESSION, 'subscript_right_bracket');
const Member MEMBER_SWITCH_EXPRESSION = tuple(KIND_SWITCH_STATEMENT, 'switch_expression');
const Member MEMBER_SWITCH_KEYWORD = tuple(KIND_SWITCH_STATEMENT, 'switch_keyword');
const Member MEMBER_SWITCH_LEFT_BRACE = tuple(KIND_SWITCH_STATEMENT, 'switch_left_brace');
const Member MEMBER_SWITCH_LEFT_PAREN = tuple(KIND_SWITCH_STATEMENT, 'switch_left_paren');
const Member MEMBER_SWITCH_RIGHT_BRACE = tuple(KIND_SWITCH_STATEMENT, 'switch_right_brace');
const Member MEMBER_SWITCH_RIGHT_PAREN = tuple(KIND_SWITCH_STATEMENT, 'switch_right_paren');
const Member MEMBER_SWITCH_SECTION_FALLTHROUGH = tuple(KIND_SWITCH_SECTION, 'switch_section_fallthrough');
const Member MEMBER_SWITCH_SECTION_LABELS = tuple(KIND_SWITCH_SECTION, 'switch_section_labels');
const Member MEMBER_SWITCH_SECTION_STATEMENTS = tuple(KIND_SWITCH_SECTION, 'switch_section_statements');
const Member MEMBER_SWITCH_SECTIONS = tuple(KIND_SWITCH_STATEMENT, 'switch_sections');
const Member MEMBER_THROW_EXPRESSION = tuple(KIND_THROW_STATEMENT, 'throw_expression');
const Member MEMBER_THROW_KEYWORD = tuple(KIND_THROW_STATEMENT, 'throw_keyword');
const Member MEMBER_THROW_SEMICOLON = tuple(KIND_THROW_STATEMENT, 'throw_semicolon');
const Member MEMBER_TRAIT_USE_ALIAS_ITEM_ALIASED_NAME = tuple(KIND_TRAIT_USE_ALIAS_ITEM, 'trait_use_alias_item_aliased_name');
const Member MEMBER_TRAIT_USE_ALIAS_ITEM_ALIASING_NAME = tuple(KIND_TRAIT_USE_ALIAS_ITEM, 'trait_use_alias_item_aliasing_name');
const Member MEMBER_TRAIT_USE_ALIAS_ITEM_KEYWORD = tuple(KIND_TRAIT_USE_ALIAS_ITEM, 'trait_use_alias_item_keyword');
const Member MEMBER_TRAIT_USE_ALIAS_ITEM_MODIFIERS = tuple(KIND_TRAIT_USE_ALIAS_ITEM, 'trait_use_alias_item_modifiers');
const Member MEMBER_TRAIT_USE_CONFLICT_RESOLUTION_CLAUSES = tuple(KIND_TRAIT_USE_CONFLICT_RESOLUTION, 'trait_use_conflict_resolution_clauses');
const Member MEMBER_TRAIT_USE_CONFLICT_RESOLUTION_KEYWORD = tuple(KIND_TRAIT_USE_CONFLICT_RESOLUTION, 'trait_use_conflict_resolution_keyword');
const Member MEMBER_TRAIT_USE_CONFLICT_RESOLUTION_LEFT_BRACE = tuple(KIND_TRAIT_USE_CONFLICT_RESOLUTION, 'trait_use_conflict_resolution_left_brace');
const Member MEMBER_TRAIT_USE_CONFLICT_RESOLUTION_NAMES = tuple(KIND_TRAIT_USE_CONFLICT_RESOLUTION, 'trait_use_conflict_resolution_names');
const Member MEMBER_TRAIT_USE_CONFLICT_RESOLUTION_RIGHT_BRACE = tuple(KIND_TRAIT_USE_CONFLICT_RESOLUTION, 'trait_use_conflict_resolution_right_brace');
const Member MEMBER_TRAIT_USE_KEYWORD = tuple(KIND_TRAIT_USE, 'trait_use_keyword');
const Member MEMBER_TRAIT_USE_NAMES = tuple(KIND_TRAIT_USE, 'trait_use_names');
const Member MEMBER_TRAIT_USE_PRECEDENCE_ITEM_KEYWORD = tuple(KIND_TRAIT_USE_PRECEDENCE_ITEM, 'trait_use_precedence_item_keyword');
const Member MEMBER_TRAIT_USE_PRECEDENCE_ITEM_NAME = tuple(KIND_TRAIT_USE_PRECEDENCE_ITEM, 'trait_use_precedence_item_name');
const Member MEMBER_TRAIT_USE_PRECEDENCE_ITEM_REMOVED_NAMES = tuple(KIND_TRAIT_USE_PRECEDENCE_ITEM, 'trait_use_precedence_item_removed_names');
const Member MEMBER_TRAIT_USE_SEMICOLON = tuple(KIND_TRAIT_USE, 'trait_use_semicolon');
const Member MEMBER_TRY_CATCH_CLAUSES = tuple(KIND_TRY_STATEMENT, 'try_catch_clauses');
const Member MEMBER_TRY_COMPOUND_STATEMENT = tuple(KIND_TRY_STATEMENT, 'try_compound_statement');
const Member MEMBER_TRY_FINALLY_CLAUSE = tuple(KIND_TRY_STATEMENT, 'try_finally_clause');
const Member MEMBER_TRY_KEYWORD = tuple(KIND_TRY_STATEMENT, 'try_keyword');
const Member MEMBER_TUPLE_EXPRESSION_ITEMS = tuple(KIND_TUPLE_EXPRESSION, 'tuple_expression_items');
const Member MEMBER_TUPLE_EXPRESSION_KEYWORD = tuple(KIND_TUPLE_EXPRESSION, 'tuple_expression_keyword');
const Member MEMBER_TUPLE_EXPRESSION_LEFT_PAREN = tuple(KIND_TUPLE_EXPRESSION, 'tuple_expression_left_paren');
const Member MEMBER_TUPLE_EXPRESSION_RIGHT_PAREN = tuple(KIND_TUPLE_EXPRESSION, 'tuple_expression_right_paren');
const Member MEMBER_TUPLE_LEFT_PAREN = tuple(KIND_TUPLE_TYPE_SPECIFIER, 'tuple_left_paren');
const Member MEMBER_TUPLE_RIGHT_PAREN = tuple(KIND_TUPLE_TYPE_SPECIFIER, 'tuple_right_paren');
const Member MEMBER_TUPLE_TYPE_KEYWORD = tuple(KIND_TUPLE_TYPE_EXPLICIT_SPECIFIER, 'tuple_type_keyword');
const Member MEMBER_TUPLE_TYPE_LEFT_ANGLE = tuple(KIND_TUPLE_TYPE_EXPLICIT_SPECIFIER, 'tuple_type_left_angle');
const Member MEMBER_TUPLE_TYPE_RIGHT_ANGLE = tuple(KIND_TUPLE_TYPE_EXPLICIT_SPECIFIER, 'tuple_type_right_angle');
const Member MEMBER_TUPLE_TYPE_TYPES = tuple(KIND_TUPLE_TYPE_EXPLICIT_SPECIFIER, 'tuple_type_types');
const Member MEMBER_TUPLE_TYPES = tuple(KIND_TUPLE_TYPE_SPECIFIER, 'tuple_types');
const Member MEMBER_TYPE_ARGUMENTS_LEFT_ANGLE = tuple(KIND_TYPE_ARGUMENTS, 'type_arguments_left_angle');
const Member MEMBER_TYPE_ARGUMENTS_RIGHT_ANGLE = tuple(KIND_TYPE_ARGUMENTS, 'type_arguments_right_angle');
const Member MEMBER_TYPE_ARGUMENTS_TYPES = tuple(KIND_TYPE_ARGUMENTS, 'type_arguments_types');
const Member MEMBER_TYPE_ATTRIBUTE_SPEC = tuple(KIND_TYPE_PARAMETER, 'type_attribute_spec');
const Member MEMBER_TYPE_CONST_ATTRIBUTE_SPEC = tuple(KIND_TYPE_CONST_DECLARATION, 'type_const_attribute_spec');
const Member MEMBER_TYPE_CONST_EQUAL = tuple(KIND_TYPE_CONST_DECLARATION, 'type_const_equal');
const Member MEMBER_TYPE_CONST_KEYWORD = tuple(KIND_TYPE_CONST_DECLARATION, 'type_const_keyword');
const Member MEMBER_TYPE_CONST_MODIFIERS = tuple(KIND_TYPE_CONST_DECLARATION, 'type_const_modifiers');
const Member MEMBER_TYPE_CONST_NAME = tuple(KIND_TYPE_CONST_DECLARATION, 'type_const_name');
const Member MEMBER_TYPE_CONST_SEMICOLON = tuple(KIND_TYPE_CONST_DECLARATION, 'type_const_semicolon');
const Member MEMBER_TYPE_CONST_TYPE_CONSTRAINT = tuple(KIND_TYPE_CONST_DECLARATION, 'type_const_type_constraint');
const Member MEMBER_TYPE_CONST_TYPE_CONSTRAINTS = tuple(KIND_TYPE_CONST_DECLARATION, 'type_const_type_constraints');
const Member MEMBER_TYPE_CONST_TYPE_KEYWORD = tuple(KIND_TYPE_CONST_DECLARATION, 'type_const_type_keyword');
const Member MEMBER_TYPE_CONST_TYPE_PARAMETERS = tuple(KIND_TYPE_CONST_DECLARATION, 'type_const_type_parameters');
const Member MEMBER_TYPE_CONST_TYPE_SPECIFIER = tuple(KIND_TYPE_CONST_DECLARATION, 'type_const_type_specifier');
const Member MEMBER_TYPE_CONSTANT_LEFT_TYPE = tuple(KIND_TYPE_CONSTANT, 'type_constant_left_type');
const Member MEMBER_TYPE_CONSTANT_RIGHT_TYPE = tuple(KIND_TYPE_CONSTANT, 'type_constant_right_type');
const Member MEMBER_TYPE_CONSTANT_SEPARATOR = tuple(KIND_TYPE_CONSTANT, 'type_constant_separator');
const Member MEMBER_TYPE_CONSTRAINTS = tuple(KIND_TYPE_PARAMETER, 'type_constraints');
const Member MEMBER_TYPE_IN_REFINEMENT_CONSTRAINTS = tuple(KIND_TYPE_IN_REFINEMENT, 'type_in_refinement_constraints');
const Member MEMBER_TYPE_IN_REFINEMENT_EQUAL = tuple(KIND_TYPE_IN_REFINEMENT, 'type_in_refinement_equal');
const Member MEMBER_TYPE_IN_REFINEMENT_KEYWORD = tuple(KIND_TYPE_IN_REFINEMENT, 'type_in_refinement_keyword');
const Member MEMBER_TYPE_IN_REFINEMENT_NAME = tuple(KIND_TYPE_IN_REFINEMENT, 'type_in_refinement_name');
const Member MEMBER_TYPE_IN_REFINEMENT_TYPE = tuple(KIND_TYPE_IN_REFINEMENT, 'type_in_refinement_type');
const Member MEMBER_TYPE_IN_REFINEMENT_TYPE_PARAMETERS = tuple(KIND_TYPE_IN_REFINEMENT, 'type_in_refinement_type_parameters');
const Member MEMBER_TYPE_NAME = tuple(KIND_TYPE_PARAMETER, 'type_name');
const Member MEMBER_TYPE_PARAM_PARAMS = tuple(KIND_TYPE_PARAMETER, 'type_param_params');
const Member MEMBER_TYPE_PARAMETERS_LEFT_ANGLE = tuple(KIND_TYPE_PARAMETERS, 'type_parameters_left_angle');
const Member MEMBER_TYPE_PARAMETERS_PARAMETERS = tuple(KIND_TYPE_PARAMETERS, 'type_parameters_parameters');
const Member MEMBER_TYPE_PARAMETERS_RIGHT_ANGLE = tuple(KIND_TYPE_PARAMETERS, 'type_parameters_right_angle');
const Member MEMBER_TYPE_REFINEMENT_KEYWORD = tuple(KIND_TYPE_REFINEMENT, 'type_refinement_keyword');
const Member MEMBER_TYPE_REFINEMENT_LEFT_BRACE = tuple(KIND_TYPE_REFINEMENT, 'type_refinement_left_brace');
const Member MEMBER_TYPE_REFINEMENT_MEMBERS = tuple(KIND_TYPE_REFINEMENT, 'type_refinement_members');
const Member MEMBER_TYPE_REFINEMENT_RIGHT_BRACE = tuple(KIND_TYPE_REFINEMENT, 'type_refinement_right_brace');
const Member MEMBER_TYPE_REFINEMENT_TYPE = tuple(KIND_TYPE_REFINEMENT, 'type_refinement_type');
const Member MEMBER_TYPE_REIFIED = tuple(KIND_TYPE_PARAMETER, 'type_reified');
const Member MEMBER_TYPE_VARIANCE = tuple(KIND_TYPE_PARAMETER, 'type_variance');
const Member MEMBER_UNION_LEFT_PAREN = tuple(KIND_UNION_TYPE_SPECIFIER, 'union_left_paren');
const Member MEMBER_UNION_RIGHT_PAREN = tuple(KIND_UNION_TYPE_SPECIFIER, 'union_right_paren');
const Member MEMBER_UNION_TYPES = tuple(KIND_UNION_TYPE_SPECIFIER, 'union_types');
const Member MEMBER_UNSET_KEYWORD = tuple(KIND_UNSET_STATEMENT, 'unset_keyword');
const Member MEMBER_UNSET_LEFT_PAREN = tuple(KIND_UNSET_STATEMENT, 'unset_left_paren');
const Member MEMBER_UNSET_RIGHT_PAREN = tuple(KIND_UNSET_STATEMENT, 'unset_right_paren');
const Member MEMBER_UNSET_SEMICOLON = tuple(KIND_UNSET_STATEMENT, 'unset_semicolon');
const Member MEMBER_UNSET_VARIABLES = tuple(KIND_UNSET_STATEMENT, 'unset_variables');
const Member MEMBER_UPCAST_LEFT_OPERAND = tuple(KIND_UPCAST_EXPRESSION, 'upcast_left_operand');
const Member MEMBER_UPCAST_OPERATOR = tuple(KIND_UPCAST_EXPRESSION, 'upcast_operator');
const Member MEMBER_UPCAST_RIGHT_OPERAND = tuple(KIND_UPCAST_EXPRESSION, 'upcast_right_operand');
const Member MEMBER_USING_BLOCK_AWAIT_KEYWORD = tuple(KIND_USING_STATEMENT_BLOCK_SCOPED, 'using_block_await_keyword');
const Member MEMBER_USING_BLOCK_BODY = tuple(KIND_USING_STATEMENT_BLOCK_SCOPED, 'using_block_body');
const Member MEMBER_USING_BLOCK_EXPRESSIONS = tuple(KIND_USING_STATEMENT_BLOCK_SCOPED, 'using_block_expressions');
const Member MEMBER_USING_BLOCK_LEFT_PAREN = tuple(KIND_USING_STATEMENT_BLOCK_SCOPED, 'using_block_left_paren');
const Member MEMBER_USING_BLOCK_RIGHT_PAREN = tuple(KIND_USING_STATEMENT_BLOCK_SCOPED, 'using_block_right_paren');
const Member MEMBER_USING_BLOCK_USING_KEYWORD = tuple(KIND_USING_STATEMENT_BLOCK_SCOPED, 'using_block_using_keyword');
const Member MEMBER_USING_FUNCTION_AWAIT_KEYWORD = tuple(KIND_USING_STATEMENT_FUNCTION_SCOPED, 'using_function_await_keyword');
const Member MEMBER_USING_FUNCTION_EXPRESSION = tuple(KIND_USING_STATEMENT_FUNCTION_SCOPED, 'using_function_expression');
const Member MEMBER_USING_FUNCTION_SEMICOLON = tuple(KIND_USING_STATEMENT_FUNCTION_SCOPED, 'using_function_semicolon');
const Member MEMBER_USING_FUNCTION_USING_KEYWORD = tuple(KIND_USING_STATEMENT_FUNCTION_SCOPED, 'using_function_using_keyword');
const Member MEMBER_VARIABLE_EXPRESSION = tuple(KIND_VARIABLE_SYNTAX, 'variable_expression');
const Member MEMBER_VARIADIC_PARAMETER_CALL_CONVENTION = tuple(KIND_VARIADIC_PARAMETER, 'variadic_parameter_call_convention');
const Member MEMBER_VARIADIC_PARAMETER_ELLIPSIS = tuple(KIND_VARIADIC_PARAMETER, 'variadic_parameter_ellipsis');
const Member MEMBER_VARIADIC_PARAMETER_TYPE = tuple(KIND_VARIADIC_PARAMETER, 'variadic_parameter_type');
const Member MEMBER_VARRAY_INTRINSIC_EXPLICIT_TYPE = tuple(KIND_VARRAY_INTRINSIC_EXPRESSION, 'varray_intrinsic_explicit_type');
const Member MEMBER_VARRAY_INTRINSIC_KEYWORD = tuple(KIND_VARRAY_INTRINSIC_EXPRESSION, 'varray_intrinsic_keyword');
const Member MEMBER_VARRAY_INTRINSIC_LEFT_BRACKET = tuple(KIND_VARRAY_INTRINSIC_EXPRESSION, 'varray_intrinsic_left_bracket');
const Member MEMBER_VARRAY_INTRINSIC_MEMBERS = tuple(KIND_VARRAY_INTRINSIC_EXPRESSION, 'varray_intrinsic_members');
const Member MEMBER_VARRAY_INTRINSIC_RIGHT_BRACKET = tuple(KIND_VARRAY_INTRINSIC_EXPRESSION, 'varray_intrinsic_right_bracket');
const Member MEMBER_VARRAY_KEYWORD = tuple(KIND_VARRAY_TYPE_SPECIFIER, 'varray_keyword');
const Member MEMBER_VARRAY_LEFT_ANGLE = tuple(KIND_VARRAY_TYPE_SPECIFIER, 'varray_left_angle');
const Member MEMBER_VARRAY_RIGHT_ANGLE = tuple(KIND_VARRAY_TYPE_SPECIFIER, 'varray_right_angle');
const Member MEMBER_VARRAY_TRAILING_COMMA = tuple(KIND_VARRAY_TYPE_SPECIFIER, 'varray_trailing_comma');
const Member MEMBER_VARRAY_TYPE = tuple(KIND_VARRAY_TYPE_SPECIFIER, 'varray_type');
const Member MEMBER_VECTOR_INTRINSIC_EXPLICIT_TYPE = tuple(KIND_VECTOR_INTRINSIC_EXPRESSION, 'vector_intrinsic_explicit_type');
const Member MEMBER_VECTOR_INTRINSIC_KEYWORD = tuple(KIND_VECTOR_INTRINSIC_EXPRESSION, 'vector_intrinsic_keyword');
const Member MEMBER_VECTOR_INTRINSIC_LEFT_BRACKET = tuple(KIND_VECTOR_INTRINSIC_EXPRESSION, 'vector_intrinsic_left_bracket');
const Member MEMBER_VECTOR_INTRINSIC_MEMBERS = tuple(KIND_VECTOR_INTRINSIC_EXPRESSION, 'vector_intrinsic_members');
const Member MEMBER_VECTOR_INTRINSIC_RIGHT_BRACKET = tuple(KIND_VECTOR_INTRINSIC_EXPRESSION, 'vector_intrinsic_right_bracket');
const Member MEMBER_VECTOR_TYPE_KEYWORD = tuple(KIND_VECTOR_TYPE_SPECIFIER, 'vector_type_keyword');
const Member MEMBER_VECTOR_TYPE_LEFT_ANGLE = tuple(KIND_VECTOR_TYPE_SPECIFIER, 'vector_type_left_angle');
const Member MEMBER_VECTOR_TYPE_RIGHT_ANGLE = tuple(KIND_VECTOR_TYPE_SPECIFIER, 'vector_type_right_angle');
const Member MEMBER_VECTOR_TYPE_TRAILING_COMMA = tuple(KIND_VECTOR_TYPE_SPECIFIER, 'vector_type_trailing_comma');
const Member MEMBER_VECTOR_TYPE_TYPE = tuple(KIND_VECTOR_TYPE_SPECIFIER, 'vector_type_type');
const Member MEMBER_WHERE_CLAUSE_CONSTRAINTS = tuple(KIND_WHERE_CLAUSE, 'where_clause_constraints');
const Member MEMBER_WHERE_CLAUSE_KEYWORD = tuple(KIND_WHERE_CLAUSE, 'where_clause_keyword');
const Member MEMBER_WHERE_CONSTRAINT_LEFT_TYPE = tuple(KIND_WHERE_CONSTRAINT, 'where_constraint_left_type');
const Member MEMBER_WHERE_CONSTRAINT_OPERATOR = tuple(KIND_WHERE_CONSTRAINT, 'where_constraint_operator');
const Member MEMBER_WHERE_CONSTRAINT_RIGHT_TYPE = tuple(KIND_WHERE_CONSTRAINT, 'where_constraint_right_type');
const Member MEMBER_WHILE_BODY = tuple(KIND_WHILE_STATEMENT, 'while_body');
const Member MEMBER_WHILE_CONDITION = tuple(KIND_WHILE_STATEMENT, 'while_condition');
const Member MEMBER_WHILE_KEYWORD = tuple(KIND_WHILE_STATEMENT, 'while_keyword');
const Member MEMBER_WHILE_LEFT_PAREN = tuple(KIND_WHILE_STATEMENT, 'while_left_paren');
const Member MEMBER_WHILE_RIGHT_PAREN = tuple(KIND_WHILE_STATEMENT, 'while_right_paren');
const Member MEMBER_XHP_ATTRIBUTE_ATTRIBUTES = tuple(KIND_XHP_CLASS_ATTRIBUTE_DECLARATION, 'xhp_attribute_attributes');
const Member MEMBER_XHP_ATTRIBUTE_DECL_INITIALIZER = tuple(KIND_XHP_CLASS_ATTRIBUTE, 'xhp_attribute_decl_initializer');
const Member MEMBER_XHP_ATTRIBUTE_DECL_NAME = tuple(KIND_XHP_CLASS_ATTRIBUTE, 'xhp_attribute_decl_name');
const Member MEMBER_XHP_ATTRIBUTE_DECL_REQUIRED = tuple(KIND_XHP_CLASS_ATTRIBUTE, 'xhp_attribute_decl_required');
const Member MEMBER_XHP_ATTRIBUTE_DECL_TYPE = tuple(KIND_XHP_CLASS_ATTRIBUTE, 'xhp_attribute_decl_type');
const Member MEMBER_XHP_ATTRIBUTE_KEYWORD = tuple(KIND_XHP_CLASS_ATTRIBUTE_DECLARATION, 'xhp_attribute_keyword');
const Member MEMBER_XHP_ATTRIBUTE_SEMICOLON = tuple(KIND_XHP_CLASS_ATTRIBUTE_DECLARATION, 'xhp_attribute_semicolon');
const Member MEMBER_XHP_BODY = tuple(KIND_XHP_EXPRESSION, 'xhp_body');
const Member MEMBER_XHP_CATEGORY_CATEGORIES = tuple(KIND_XHP_CATEGORY_DECLARATION, 'xhp_category_categories');
const Member MEMBER_XHP_CATEGORY_KEYWORD = tuple(KIND_XHP_CATEGORY_DECLARATION, 'xhp_category_keyword');
const Member MEMBER_XHP_CATEGORY_SEMICOLON = tuple(KIND_XHP_CATEGORY_DECLARATION, 'xhp_category_semicolon');
const Member MEMBER_XHP_CHILDREN_EXPRESSION = tuple(KIND_XHP_CHILDREN_DECLARATION, 'xhp_children_expression');
const Member MEMBER_XHP_CHILDREN_KEYWORD = tuple(KIND_XHP_CHILDREN_DECLARATION, 'xhp_children_keyword');
const Member MEMBER_XHP_CHILDREN_LIST_LEFT_PAREN = tuple(KIND_XHP_CHILDREN_PARENTHESIZED_LIST, 'xhp_children_list_left_paren');
const Member MEMBER_XHP_CHILDREN_LIST_RIGHT_PAREN = tuple(KIND_XHP_CHILDREN_PARENTHESIZED_LIST, 'xhp_children_list_right_paren');
const Member MEMBER_XHP_CHILDREN_LIST_XHP_CHILDREN = tuple(KIND_XHP_CHILDREN_PARENTHESIZED_LIST, 'xhp_children_list_xhp_children');
const Member MEMBER_XHP_CHILDREN_SEMICOLON = tuple(KIND_XHP_CHILDREN_DECLARATION, 'xhp_children_semicolon');
const Member MEMBER_XHP_CLOSE = tuple(KIND_XHP_EXPRESSION, 'xhp_close');
const Member MEMBER_XHP_CLOSE_LEFT_ANGLE = tuple(KIND_XHP_CLOSE, 'xhp_close_left_angle');
const Member MEMBER_XHP_CLOSE_NAME = tuple(KIND_XHP_CLOSE, 'xhp_close_name');
const Member MEMBER_XHP_CLOSE_RIGHT_ANGLE = tuple(KIND_XHP_CLOSE, 'xhp_close_right_angle');
const Member MEMBER_XHP_ENUM_KEYWORD = tuple(KIND_XHP_ENUM_TYPE, 'xhp_enum_keyword');
const Member MEMBER_XHP_ENUM_LEFT_BRACE = tuple(KIND_XHP_ENUM_TYPE, 'xhp_enum_left_brace');
const Member MEMBER_XHP_ENUM_LIKE = tuple(KIND_XHP_ENUM_TYPE, 'xhp_enum_like');
const Member MEMBER_XHP_ENUM_RIGHT_BRACE = tuple(KIND_XHP_ENUM_TYPE, 'xhp_enum_right_brace');
const Member MEMBER_XHP_ENUM_VALUES = tuple(KIND_XHP_ENUM_TYPE, 'xhp_enum_values');
const Member MEMBER_XHP_LATEINIT_AT = tuple(KIND_XHP_LATEINIT, 'xhp_lateinit_at');
const Member MEMBER_XHP_LATEINIT_KEYWORD = tuple(KIND_XHP_LATEINIT, 'xhp_lateinit_keyword');
const Member MEMBER_XHP_OPEN = tuple(KIND_XHP_EXPRESSION, 'xhp_open');
const Member MEMBER_XHP_OPEN_ATTRIBUTES = tuple(KIND_XHP_OPEN, 'xhp_open_attributes');
const Member MEMBER_XHP_OPEN_LEFT_ANGLE = tuple(KIND_XHP_OPEN, 'xhp_open_left_angle');
const Member MEMBER_XHP_OPEN_NAME = tuple(KIND_XHP_OPEN, 'xhp_open_name');
const Member MEMBER_XHP_OPEN_RIGHT_ANGLE = tuple(KIND_XHP_OPEN, 'xhp_open_right_angle');
const Member MEMBER_XHP_REQUIRED_AT = tuple(KIND_XHP_REQUIRED, 'xhp_required_at');
const Member MEMBER_XHP_REQUIRED_KEYWORD = tuple(KIND_XHP_REQUIRED, 'xhp_required_keyword');
const Member MEMBER_XHP_SIMPLE_ATTRIBUTE_EQUAL = tuple(KIND_XHP_SIMPLE_ATTRIBUTE, 'xhp_simple_attribute_equal');
const Member MEMBER_XHP_SIMPLE_ATTRIBUTE_EXPRESSION = tuple(KIND_XHP_SIMPLE_ATTRIBUTE, 'xhp_simple_attribute_expression');
const Member MEMBER_XHP_SIMPLE_ATTRIBUTE_NAME = tuple(KIND_XHP_SIMPLE_ATTRIBUTE, 'xhp_simple_attribute_name');
const Member MEMBER_XHP_SIMPLE_CLASS_ATTRIBUTE_TYPE = tuple(KIND_XHP_SIMPLE_CLASS_ATTRIBUTE, 'xhp_simple_class_attribute_type');
const Member MEMBER_XHP_SPREAD_ATTRIBUTE_EXPRESSION = tuple(KIND_XHP_SPREAD_ATTRIBUTE, 'xhp_spread_attribute_expression');
const Member MEMBER_XHP_SPREAD_ATTRIBUTE_LEFT_BRACE = tuple(KIND_XHP_SPREAD_ATTRIBUTE, 'xhp_spread_attribute_left_brace');
const Member MEMBER_XHP_SPREAD_ATTRIBUTE_RIGHT_BRACE = tuple(KIND_XHP_SPREAD_ATTRIBUTE, 'xhp_spread_attribute_right_brace');
const Member MEMBER_XHP_SPREAD_ATTRIBUTE_SPREAD_OPERATOR = tuple(KIND_XHP_SPREAD_ATTRIBUTE, 'xhp_spread_attribute_spread_operator');
const Member MEMBER_YIELD_BREAK_BREAK = tuple(KIND_YIELD_BREAK_STATEMENT, 'yield_break_break');
const Member MEMBER_YIELD_BREAK_KEYWORD = tuple(KIND_YIELD_BREAK_STATEMENT, 'yield_break_keyword');
const Member MEMBER_YIELD_BREAK_SEMICOLON = tuple(KIND_YIELD_BREAK_STATEMENT, 'yield_break_semicolon');
const Member MEMBER_YIELD_KEYWORD = tuple(KIND_YIELD_EXPRESSION, 'yield_keyword');
const Member MEMBER_YIELD_OPERAND = tuple(KIND_YIELD_EXPRESSION, 'yield_operand');
// #endregion
