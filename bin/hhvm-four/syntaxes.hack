/** portable-hack-ast is MIT licensed, see /LICENSE. */
namespace HTL\Pha\_Private\Bin;

const dict<string, keyset<string>> HHVM_FOUR_SYNTAXES = dict[
  'end_of_file' => keyset[
    'end_of_file_token',
  ],
  'script' => keyset[
    'script_declarations',
  ],
  'qualified_name' => keyset[
    'qualified_name_parts',
  ],
  'simple_type_specifier' => keyset[
    'simple_type_specifier',
  ],
  'literal' => keyset[
    'literal_expression',
  ],
  'prefixed_string' => keyset[
    'prefixed_string_name',
    'prefixed_string_str',
  ],
  'prefixed_code_expression' => keyset[
    'prefixed_code_expression',
    'prefixed_code_left_backtick',
    'prefixed_code_prefix',
    'prefixed_code_right_backtick',
  ],
  'variable' => keyset[
    'variable_expression',
  ],
  'pipe_variable' => keyset[
    'pipe_variable_expression',
  ],
  'file_attribute_specification' => keyset[
    'file_attribute_specification_attributes',
    'file_attribute_specification_colon',
    'file_attribute_specification_keyword',
    'file_attribute_specification_left_double_angle',
    'file_attribute_specification_right_double_angle',
  ],
  'enum_declaration' => keyset[
    'enum_attribute_spec',
    'enum_base',
    'enum_colon',
    'enum_enumerators',
    'enum_keyword',
    'enum_left_brace',
    'enum_name',
    'enum_right_brace',
    'enum_type',
    'enum_use_clauses',
    'enum_modifiers',
  ],
  'enum_use' => keyset[
    'enum_use_keyword',
    'enum_use_names',
    'enum_use_semicolon',
  ],
  'enumerator' => keyset[
    'enumerator_equal',
    'enumerator_name',
    'enumerator_semicolon',
    'enumerator_value',
  ],
  'enum_class_declaration' => keyset[
    'enum_class_attribute_spec',
    'enum_class_base',
    'enum_class_class_keyword',
    'enum_class_colon',
    'enum_class_elements',
    'enum_class_enum_keyword',
    'enum_class_extends',
    'enum_class_extends_list',
    'enum_class_left_brace',
    'enum_class_name',
    'enum_class_right_brace',
    'enum_class_modifiers',
  ],
  'enum_class_enumerator' => keyset[
    'enum_class_enumerator_equal',
    'enum_class_enumerator_initial_value',
    'enum_class_enumerator_name',
    'enum_class_enumerator_semicolon',
    'enum_class_enumerator_type',
    'enum_class_enumerator_initializer',
    'enum_class_enumerator_modifiers',
  ],
  'record_declaration' => keyset[
    'record_attribute_spec',
    'record_extends_keyword',
    'record_extends_opt',
    'record_fields',
    'record_keyword',
    'record_left_brace',
    'record_modifier',
    'record_name',
    'record_right_brace',
  ],
  'record_field' => keyset[
    'record_field_init',
    'record_field_name',
    'record_field_semi',
    'record_field_type',
  ],
  'alias_declaration' => keyset[
    'alias_attribute_spec',
    'alias_constraint',
    'alias_equal',
    'alias_generic_parameter',
    'alias_keyword',
    'alias_name',
    'alias_semicolon',
    'alias_type',
    'alias_modifiers',
    'alias_module_kw_opt',
  ],
  'property_declaration' => keyset[
    'property_attribute_spec',
    'property_declarators',
    'property_modifiers',
    'property_semicolon',
    'property_type',
  ],
  'property_declarator' => keyset[
    'property_initializer',
    'property_name',
  ],
  'namespace_declaration' => keyset[
    'namespace_body',
    'namespace_header',
  ],
  'namespace_declaration_header' => keyset[
    'namespace_keyword',
    'namespace_name',
  ],
  'namespace_body' => keyset[
    'namespace_declarations',
    'namespace_left_brace',
    'namespace_right_brace',
  ],
  'namespace_empty_body' => keyset[
    'namespace_semicolon',
  ],
  'namespace_use_declaration' => keyset[
    'namespace_use_clauses',
    'namespace_use_keyword',
    'namespace_use_kind',
    'namespace_use_semicolon',
  ],
  'namespace_group_use_declaration' => keyset[
    'namespace_group_use_clauses',
    'namespace_group_use_keyword',
    'namespace_group_use_kind',
    'namespace_group_use_left_brace',
    'namespace_group_use_prefix',
    'namespace_group_use_right_brace',
    'namespace_group_use_semicolon',
  ],
  'namespace_use_clause' => keyset[
    'namespace_use_alias',
    'namespace_use_as',
    'namespace_use_clause_kind',
    'namespace_use_name',
  ],
  'function_declaration' => keyset[
    'function_attribute_spec',
    'function_body',
    'function_declaration_header',
  ],
  'function_declaration_header' => keyset[
    'function_colon',
    'function_contexts',
    'function_keyword',
    'function_left_paren',
    'function_modifiers',
    'function_name',
    'function_parameter_list',
    'function_right_paren',
    'function_type',
    'function_type_parameter_list',
    'function_where_clause',
    'function_readonly_return',
  ],
  'contexts' => keyset[
    'contexts_left_bracket',
    'contexts_right_bracket',
    'contexts_types',
  ],
  'where_clause' => keyset[
    'where_clause_constraints',
    'where_clause_keyword',
  ],
  'where_constraint' => keyset[
    'where_constraint_left_type',
    'where_constraint_operator',
    'where_constraint_right_type',
  ],
  'methodish_declaration' => keyset[
    'methodish_attribute',
    'methodish_function_body',
    'methodish_function_decl_header',
    'methodish_semicolon',
  ],
  'methodish_trait_resolution' => keyset[
    'methodish_trait_attribute',
    'methodish_trait_equal',
    'methodish_trait_function_decl_header',
    'methodish_trait_name',
    'methodish_trait_semicolon',
  ],
  'classish_declaration' => keyset[
    'classish_attribute',
    'classish_body',
    'classish_extends_keyword',
    'classish_extends_list',
    'classish_implements_keyword',
    'classish_implements_list',
    'classish_keyword',
    'classish_modifiers',
    'classish_name',
    'classish_type_parameters',
    'classish_where_clause',
    'classish_xhp',
  ],
  'classish_body' => keyset[
    'classish_body_elements',
    'classish_body_left_brace',
    'classish_body_right_brace',
  ],
  'trait_use_precedence_item' => keyset[
    'trait_use_precedence_item_keyword',
    'trait_use_precedence_item_name',
    'trait_use_precedence_item_removed_names',
  ],
  'trait_use_alias_item' => keyset[
    'trait_use_alias_item_aliased_name',
    'trait_use_alias_item_aliasing_name',
    'trait_use_alias_item_keyword',
    'trait_use_alias_item_modifiers',
  ],
  'trait_use_conflict_resolution' => keyset[
    'trait_use_conflict_resolution_clauses',
    'trait_use_conflict_resolution_keyword',
    'trait_use_conflict_resolution_left_brace',
    'trait_use_conflict_resolution_names',
    'trait_use_conflict_resolution_right_brace',
  ],
  'trait_use' => keyset[
    'trait_use_keyword',
    'trait_use_names',
    'trait_use_semicolon',
  ],
  'require_clause' => keyset[
    'require_keyword',
    'require_kind',
    'require_name',
    'require_semicolon',
  ],
  'const_declaration' => keyset[
    'const_declarators',
    'const_keyword',
    'const_modifiers',
    'const_semicolon',
    'const_type_specifier',
    'const_attribute_spec',
  ],
  'constant_declarator' => keyset[
    'constant_declarator_initializer',
    'constant_declarator_name',
  ],
  'type_const_declaration' => keyset[
    'type_const_attribute_spec',
    'type_const_equal',
    'type_const_keyword',
    'type_const_modifiers',
    'type_const_name',
    'type_const_semicolon',
    'type_const_type_constraint',
    'type_const_type_keyword',
    'type_const_type_parameters',
    'type_const_type_specifier',
    'type_const_type_constraints',
  ],
  'context_const_declaration' => keyset[
    'context_const_const_keyword',
    'context_const_constraint',
    'context_const_ctx_keyword',
    'context_const_ctx_list',
    'context_const_equal',
    'context_const_modifiers',
    'context_const_name',
    'context_const_semicolon',
    'context_const_type_parameters',
  ],
  'decorated_expression' => keyset[
    'decorated_expression_decorator',
    'decorated_expression_expression',
  ],
  'parameter_declaration' => keyset[
    'parameter_attribute',
    'parameter_call_convention',
    'parameter_default_value',
    'parameter_name',
    'parameter_type',
    'parameter_visibility',
    'parameter_readonly',
  ],
  'variadic_parameter' => keyset[
    'variadic_parameter_call_convention',
    'variadic_parameter_ellipsis',
    'variadic_parameter_type',
  ],
  'old_attribute_specification' => keyset[
    'old_attribute_specification_attributes',
    'old_attribute_specification_left_double_angle',
    'old_attribute_specification_right_double_angle',
  ],
  'attribute_specification' => keyset[
    'attribute_specification_attributes',
  ],
  'attribute' => keyset[
    'attribute_at',
    'attribute_attribute_name',
  ],
  'inclusion_expression' => keyset[
    'inclusion_filename',
    'inclusion_require',
  ],
  'inclusion_directive' => keyset[
    'inclusion_expression',
    'inclusion_semicolon',
  ],
  'compound_statement' => keyset[
    'compound_left_brace',
    'compound_right_brace',
    'compound_statements',
  ],
  'expression_statement' => keyset[
    'expression_statement_expression',
    'expression_statement_semicolon',
  ],
  'markup_section' => keyset[
    'markup_hashbang',
    'markup_suffix',
  ],
  'markup_suffix' => keyset[
    'markup_suffix_less_than_question',
    'markup_suffix_name',
  ],
  'unset_statement' => keyset[
    'unset_keyword',
    'unset_left_paren',
    'unset_right_paren',
    'unset_semicolon',
    'unset_variables',
  ],
  'using_statement_block_scoped' => keyset[
    'using_block_await_keyword',
    'using_block_body',
    'using_block_expressions',
    'using_block_left_paren',
    'using_block_right_paren',
    'using_block_using_keyword',
  ],
  'using_statement_function_scoped' => keyset[
    'using_function_await_keyword',
    'using_function_expression',
    'using_function_semicolon',
    'using_function_using_keyword',
  ],
  'while_statement' => keyset[
    'while_body',
    'while_condition',
    'while_keyword',
    'while_left_paren',
    'while_right_paren',
  ],
  'if_statement' => keyset[
    'if_condition',
    'if_else_clause',
    'if_elseif_clauses',
    'if_keyword',
    'if_left_paren',
    'if_right_paren',
    'if_statement',
  ],
  'elseif_clause' => keyset[
    'elseif_condition',
    'elseif_keyword',
    'elseif_left_paren',
    'elseif_right_paren',
    'elseif_statement',
  ],
  'else_clause' => keyset[
    'else_keyword',
    'else_statement',
  ],
  'try_statement' => keyset[
    'try_catch_clauses',
    'try_compound_statement',
    'try_finally_clause',
    'try_keyword',
  ],
  'catch_clause' => keyset[
    'catch_body',
    'catch_keyword',
    'catch_left_paren',
    'catch_right_paren',
    'catch_type',
    'catch_variable',
  ],
  'finally_clause' => keyset[
    'finally_body',
    'finally_keyword',
  ],
  'do_statement' => keyset[
    'do_body',
    'do_condition',
    'do_keyword',
    'do_left_paren',
    'do_right_paren',
    'do_semicolon',
    'do_while_keyword',
  ],
  'for_statement' => keyset[
    'for_body',
    'for_control',
    'for_end_of_loop',
    'for_first_semicolon',
    'for_initializer',
    'for_keyword',
    'for_left_paren',
    'for_right_paren',
    'for_second_semicolon',
  ],
  'foreach_statement' => keyset[
    'foreach_arrow',
    'foreach_as',
    'foreach_await_keyword',
    'foreach_body',
    'foreach_collection',
    'foreach_key',
    'foreach_keyword',
    'foreach_left_paren',
    'foreach_right_paren',
    'foreach_value',
  ],
  'switch_statement' => keyset[
    'switch_expression',
    'switch_keyword',
    'switch_left_brace',
    'switch_left_paren',
    'switch_right_brace',
    'switch_right_paren',
    'switch_sections',
  ],
  'switch_section' => keyset[
    'switch_section_fallthrough',
    'switch_section_labels',
    'switch_section_statements',
  ],
  'switch_fallthrough' => keyset[
    'fallthrough_keyword',
    'fallthrough_semicolon',
  ],
  'case_label' => keyset[
    'case_colon',
    'case_expression',
    'case_keyword',
  ],
  'default_label' => keyset[
    'default_colon',
    'default_keyword',
  ],
  'return_statement' => keyset[
    'return_expression',
    'return_keyword',
    'return_semicolon',
  ],
  'yield_break_statement' => keyset[
    'yield_break_break',
    'yield_break_keyword',
    'yield_break_semicolon',
  ],
  'throw_statement' => keyset[
    'throw_expression',
    'throw_keyword',
    'throw_semicolon',
  ],
  'break_statement' => keyset[
    'break_keyword',
    'break_semicolon',
  ],
  'continue_statement' => keyset[
    'continue_keyword',
    'continue_semicolon',
  ],
  'echo_statement' => keyset[
    'echo_expressions',
    'echo_keyword',
    'echo_semicolon',
  ],
  'concurrent_statement' => keyset[
    'concurrent_keyword',
    'concurrent_statement',
  ],
  'simple_initializer' => keyset[
    'simple_initializer_equal',
    'simple_initializer_value',
  ],
  'anonymous_class' => keyset[
    'anonymous_class_argument_list',
    'anonymous_class_body',
    'anonymous_class_class_keyword',
    'anonymous_class_extends_keyword',
    'anonymous_class_extends_list',
    'anonymous_class_implements_keyword',
    'anonymous_class_implements_list',
    'anonymous_class_left_paren',
    'anonymous_class_right_paren',
  ],
  'anonymous_function' => keyset[
    'anonymous_async_keyword',
    'anonymous_attribute_spec',
    'anonymous_body',
    'anonymous_colon',
    'anonymous_ctx_list',
    'anonymous_function_keyword',
    'anonymous_left_paren',
    'anonymous_parameters',
    'anonymous_right_paren',
    'anonymous_static_keyword',
    'anonymous_type',
    'anonymous_use',
    'anonymous_readonly_return',
  ],
  'anonymous_function_use_clause' => keyset[
    'anonymous_use_keyword',
    'anonymous_use_left_paren',
    'anonymous_use_right_paren',
    'anonymous_use_variables',
  ],
  'lambda_expression' => keyset[
    'lambda_arrow',
    'lambda_async',
    'lambda_attribute_spec',
    'lambda_body',
    'lambda_signature',
  ],
  'lambda_signature' => keyset[
    'lambda_colon',
    'lambda_contexts',
    'lambda_left_paren',
    'lambda_parameters',
    'lambda_right_paren',
    'lambda_type',
    'lambda_readonly_return',
  ],
  'cast_expression' => keyset[
    'cast_left_paren',
    'cast_operand',
    'cast_right_paren',
    'cast_type',
  ],
  'scope_resolution_expression' => keyset[
    'scope_resolution_name',
    'scope_resolution_operator',
    'scope_resolution_qualifier',
  ],
  'member_selection_expression' => keyset[
    'member_name',
    'member_object',
    'member_operator',
  ],
  'safe_member_selection_expression' => keyset[
    'safe_member_name',
    'safe_member_object',
    'safe_member_operator',
  ],
  'embedded_member_selection_expression' => keyset[
    'embedded_member_name',
    'embedded_member_object',
    'embedded_member_operator',
  ],
  'yield_expression' => keyset[
    'yield_keyword',
    'yield_operand',
  ],
  'prefix_unary_expression' => keyset[
    'prefix_unary_operand',
    'prefix_unary_operator',
  ],
  'postfix_unary_expression' => keyset[
    'postfix_unary_operand',
    'postfix_unary_operator',
  ],
  'binary_expression' => keyset[
    'binary_left_operand',
    'binary_operator',
    'binary_right_operand',
  ],
  'is_expression' => keyset[
    'is_left_operand',
    'is_operator',
    'is_right_operand',
  ],
  'as_expression' => keyset[
    'as_left_operand',
    'as_operator',
    'as_right_operand',
  ],
  'nullable_as_expression' => keyset[
    'nullable_as_left_operand',
    'nullable_as_operator',
    'nullable_as_right_operand',
  ],
  'conditional_expression' => keyset[
    'conditional_alternative',
    'conditional_colon',
    'conditional_consequence',
    'conditional_question',
    'conditional_test',
  ],
  'eval_expression' => keyset[
    'eval_argument',
    'eval_keyword',
    'eval_left_paren',
    'eval_right_paren',
  ],
  'define_expression' => keyset[
    'define_argument_list',
    'define_keyword',
    'define_left_paren',
    'define_right_paren',
  ],
  'isset_expression' => keyset[
    'isset_argument_list',
    'isset_keyword',
    'isset_left_paren',
    'isset_right_paren',
  ],
  'function_call_expression' => keyset[
    'function_call_argument_list',
    'function_call_left_paren',
    'function_call_receiver',
    'function_call_right_paren',
    'function_call_type_args',
    'function_call_enum_atom',
    'function_call_enum_class_label',
  ],
  'function_pointer_expression' => keyset[
    'function_pointer_receiver',
    'function_pointer_type_args',
  ],
  'parenthesized_expression' => keyset[
    'parenthesized_expression_expression',
    'parenthesized_expression_left_paren',
    'parenthesized_expression_right_paren',
  ],
  'braced_expression' => keyset[
    'braced_expression_expression',
    'braced_expression_left_brace',
    'braced_expression_right_brace',
  ],
  'eTSplice_expression' => keyset[
    'et_splice_expression_dollar',
    'et_splice_expression_expression',
    'et_splice_expression_left_brace',
    'et_splice_expression_right_brace',
  ],
  'embedded_braced_expression' => keyset[
    'embedded_braced_expression_expression',
    'embedded_braced_expression_left_brace',
    'embedded_braced_expression_right_brace',
  ],
  'list_expression' => keyset[
    'list_keyword',
    'list_left_paren',
    'list_members',
    'list_right_paren',
  ],
  'collection_literal_expression' => keyset[
    'collection_literal_initializers',
    'collection_literal_left_brace',
    'collection_literal_name',
    'collection_literal_right_brace',
  ],
  'object_creation_expression' => keyset[
    'object_creation_new_keyword',
    'object_creation_object',
  ],
  'constructor_call' => keyset[
    'constructor_call_argument_list',
    'constructor_call_left_paren',
    'constructor_call_right_paren',
    'constructor_call_type',
  ],
  'record_creation_expression' => keyset[
    'record_creation_left_bracket',
    'record_creation_members',
    'record_creation_right_bracket',
    'record_creation_type',
  ],
  'darray_intrinsic_expression' => keyset[
    'darray_intrinsic_explicit_type',
    'darray_intrinsic_keyword',
    'darray_intrinsic_left_bracket',
    'darray_intrinsic_members',
    'darray_intrinsic_right_bracket',
  ],
  'dictionary_intrinsic_expression' => keyset[
    'dictionary_intrinsic_explicit_type',
    'dictionary_intrinsic_keyword',
    'dictionary_intrinsic_left_bracket',
    'dictionary_intrinsic_members',
    'dictionary_intrinsic_right_bracket',
  ],
  'keyset_intrinsic_expression' => keyset[
    'keyset_intrinsic_explicit_type',
    'keyset_intrinsic_keyword',
    'keyset_intrinsic_left_bracket',
    'keyset_intrinsic_members',
    'keyset_intrinsic_right_bracket',
  ],
  'varray_intrinsic_expression' => keyset[
    'varray_intrinsic_explicit_type',
    'varray_intrinsic_keyword',
    'varray_intrinsic_left_bracket',
    'varray_intrinsic_members',
    'varray_intrinsic_right_bracket',
  ],
  'vector_intrinsic_expression' => keyset[
    'vector_intrinsic_explicit_type',
    'vector_intrinsic_keyword',
    'vector_intrinsic_left_bracket',
    'vector_intrinsic_members',
    'vector_intrinsic_right_bracket',
  ],
  'element_initializer' => keyset[
    'element_arrow',
    'element_key',
    'element_value',
  ],
  'subscript_expression' => keyset[
    'subscript_index',
    'subscript_left_bracket',
    'subscript_receiver',
    'subscript_right_bracket',
  ],
  'embedded_subscript_expression' => keyset[
    'embedded_subscript_index',
    'embedded_subscript_left_bracket',
    'embedded_subscript_receiver',
    'embedded_subscript_right_bracket',
  ],
  'awaitable_creation_expression' => keyset[
    'awaitable_async',
    'awaitable_attribute_spec',
    'awaitable_compound_statement',
  ],
  'xhp_children_declaration' => keyset[
    'xhp_children_expression',
    'xhp_children_keyword',
    'xhp_children_semicolon',
  ],
  'xhp_children_parenthesized_list' => keyset[
    'xhp_children_list_left_paren',
    'xhp_children_list_right_paren',
    'xhp_children_list_xhp_children',
  ],
  'xhp_category_declaration' => keyset[
    'xhp_category_categories',
    'xhp_category_keyword',
    'xhp_category_semicolon',
  ],
  'xhp_enum_type' => keyset[
    'xhp_enum_keyword',
    'xhp_enum_left_brace',
    'xhp_enum_right_brace',
    'xhp_enum_values',
    'xhp_enum_like',
  ],
  'XHP_lateinit' => keyset[
    'xhp_lateinit_at',
    'xhp_lateinit_keyword',
  ],
  'xhp_required' => keyset[
    'xhp_required_at',
    'xhp_required_keyword',
  ],
  'xhp_class_attribute_declaration' => keyset[
    'xhp_attribute_attributes',
    'xhp_attribute_keyword',
    'xhp_attribute_semicolon',
  ],
  'xhp_class_attribute' => keyset[
    'xhp_attribute_decl_initializer',
    'xhp_attribute_decl_name',
    'xhp_attribute_decl_required',
    'xhp_attribute_decl_type',
  ],
  'XHP_simple_class_attribute' => keyset[
    'xhp_simple_class_attribute_type',
  ],
  'xhp_simple_attribute' => keyset[
    'xhp_simple_attribute_equal',
    'xhp_simple_attribute_expression',
    'xhp_simple_attribute_name',
  ],
  'xhp_spread_attribute' => keyset[
    'xhp_spread_attribute_expression',
    'xhp_spread_attribute_left_brace',
    'xhp_spread_attribute_right_brace',
    'xhp_spread_attribute_spread_operator',
  ],
  'xhp_open' => keyset[
    'xhp_open_attributes',
    'xhp_open_left_angle',
    'xhp_open_name',
    'xhp_open_right_angle',
  ],
  'xhp_expression' => keyset[
    'xhp_body',
    'xhp_close',
    'xhp_open',
  ],
  'xhp_close' => keyset[
    'xhp_close_left_angle',
    'xhp_close_name',
    'xhp_close_right_angle',
  ],
  'type_constant' => keyset[
    'type_constant_left_type',
    'type_constant_right_type',
    'type_constant_separator',
  ],
  'vector_type_specifier' => keyset[
    'vector_type_keyword',
    'vector_type_left_angle',
    'vector_type_right_angle',
    'vector_type_trailing_comma',
    'vector_type_type',
  ],
  'keyset_type_specifier' => keyset[
    'keyset_type_keyword',
    'keyset_type_left_angle',
    'keyset_type_right_angle',
    'keyset_type_trailing_comma',
    'keyset_type_type',
  ],
  'tuple_type_explicit_specifier' => keyset[
    'tuple_type_keyword',
    'tuple_type_left_angle',
    'tuple_type_right_angle',
    'tuple_type_types',
  ],
  'varray_type_specifier' => keyset[
    'varray_keyword',
    'varray_left_angle',
    'varray_right_angle',
    'varray_trailing_comma',
    'varray_type',
  ],
  'function_ctx_type_specifier' => keyset[
    'function_ctx_type_keyword',
    'function_ctx_type_variable',
  ],
  'type_parameter' => keyset[
    'type_attribute_spec',
    'type_constraints',
    'type_name',
    'type_param_params',
    'type_reified',
    'type_variance',
  ],
  'type_constraint' => keyset[
    'constraint_keyword',
    'constraint_type',
  ],
  'context_constraint' => keyset[
    'ctx_constraint_ctx_list',
    'ctx_constraint_keyword',
  ],
  'darray_type_specifier' => keyset[
    'darray_comma',
    'darray_key',
    'darray_keyword',
    'darray_left_angle',
    'darray_right_angle',
    'darray_trailing_comma',
    'darray_value',
  ],
  'dictionary_type_specifier' => keyset[
    'dictionary_type_keyword',
    'dictionary_type_left_angle',
    'dictionary_type_members',
    'dictionary_type_right_angle',
  ],
  'closure_type_specifier' => keyset[
    'closure_colon',
    'closure_contexts',
    'closure_function_keyword',
    'closure_inner_left_paren',
    'closure_inner_right_paren',
    'closure_outer_left_paren',
    'closure_outer_right_paren',
    'closure_parameter_list',
    'closure_return_type',
    'closure_readonly_return',
    'closure_readonly_keyword',
  ],
  'closure_parameter_type_specifier' => keyset[
    'closure_parameter_call_convention',
    'closure_parameter_type',
    'closure_parameter_readonly',
  ],
  'classname_type_specifier' => keyset[
    'classname_keyword',
    'classname_left_angle',
    'classname_right_angle',
    'classname_trailing_comma',
    'classname_type',
  ],
  'field_specifier' => keyset[
    'field_arrow',
    'field_name',
    'field_question',
    'field_type',
  ],
  'field_initializer' => keyset[
    'field_initializer_arrow',
    'field_initializer_name',
    'field_initializer_value',
  ],
  'shape_type_specifier' => keyset[
    'shape_type_ellipsis',
    'shape_type_fields',
    'shape_type_keyword',
    'shape_type_left_paren',
    'shape_type_right_paren',
  ],
  'shape_expression' => keyset[
    'shape_expression_fields',
    'shape_expression_keyword',
    'shape_expression_left_paren',
    'shape_expression_right_paren',
  ],
  'tuple_expression' => keyset[
    'tuple_expression_items',
    'tuple_expression_keyword',
    'tuple_expression_left_paren',
    'tuple_expression_right_paren',
  ],
  'generic_type_specifier' => keyset[
    'generic_argument_list',
    'generic_class_type',
  ],
  'nullable_type_specifier' => keyset[
    'nullable_question',
    'nullable_type',
  ],
  'like_type_specifier' => keyset[
    'like_tilde',
    'like_type',
  ],
  'soft_type_specifier' => keyset[
    'soft_at',
    'soft_type',
  ],
  'attributized_specifier' => keyset[
    'attributized_specifier_attribute_spec',
    'attributized_specifier_type',
  ],
  'reified_type_argument' => keyset[
    'reified_type_argument_reified',
    'reified_type_argument_type',
  ],
  'type_arguments' => keyset[
    'type_arguments_left_angle',
    'type_arguments_right_angle',
    'type_arguments_types',
  ],
  'type_parameters' => keyset[
    'type_parameters_left_angle',
    'type_parameters_parameters',
    'type_parameters_right_angle',
  ],
  'tuple_type_specifier' => keyset[
    'tuple_left_paren',
    'tuple_right_paren',
    'tuple_types',
  ],
  'union_type_specifier' => keyset[
    'union_left_paren',
    'union_right_paren',
    'union_types',
  ],
  'intersection_type_specifier' => keyset[
    'intersection_left_paren',
    'intersection_right_paren',
    'intersection_types',
  ],
  'error_syntax' => keyset[
    'error_error',
  ],
  'list_item' => keyset[
    'list_item',
    'list_separator',
  ],
  'enum_atom_expression' => keyset[
    'enum_atom_expression',
    'enum_atom_hash',
  ],
  'enum_class_label_expression' => keyset[
    'enum_class_label_expression',
    'enum_class_label_hash',
    'enum_class_label_qualifier',
  ],
  'context_alias_declaration' => keyset[
    'ctx_alias_as_constraint',
    'ctx_alias_attribute_spec',
    'ctx_alias_context',
    'ctx_alias_equal',
    'ctx_alias_generic_parameter',
    'ctx_alias_keyword',
    'ctx_alias_name',
    'ctx_alias_semicolon',
  ],
  'upcast_expression' => keyset[
    'upcast_left_operand',
    'upcast_operator',
    'upcast_right_operand',
  ],
  'module_declaration' => keyset[
    'module_declaration_attribute_spec',
    'module_declaration_keyword',
    'module_declaration_left_brace',
    'module_declaration_name',
    'module_declaration_right_brace',
    'module_declaration_module_keyword',
    'module_declaration_new_keyword',
    'module_declaration_exports',
    'module_declaration_imports',
  ],
  'module_membership_declaration' => keyset[
    'module_membership_declaration_module_keyword',
    'module_membership_declaration_name',
    'module_membership_declaration_semicolon',
  ],
  'type_refinement' => keyset[
    'type_refinement_keyword',
    'type_refinement_left_brace',
    'type_refinement_members',
    'type_refinement_right_brace',
    'type_refinement_type',
  ],
  'type_in_refinement' => keyset[
    'type_in_refinement_constraints',
    'type_in_refinement_equal',
    'type_in_refinement_keyword',
    'type_in_refinement_name',
    'type_in_refinement_type',
    'type_in_refinement_type_parameters',
  ],
  'ctx_in_refinement' => keyset[
    'ctx_in_refinement_constraints',
    'ctx_in_refinement_ctx_list',
    'ctx_in_refinement_equal',
    'ctx_in_refinement_keyword',
    'ctx_in_refinement_name',
    'ctx_in_refinement_type_parameters',
  ],
  'module_name' => keyset[
    'module_name_parts',
  ],
  'module_exports' => keyset[
    'module_exports_exports',
    'module_exports_exports_keyword',
    'module_exports_left_brace',
    'module_exports_right_brace',
  ],
  'module_imports' => keyset[
    'module_imports_imports',
    'module_imports_imports_keyword',
    'module_imports_left_brace',
    'module_imports_right_brace',
  ],
  'package_declaration' => keyset[
    'package_declaration_attribute_spec',
    'package_declaration_includes',
    'package_declaration_left_brace',
    'package_declaration_name',
    'package_declaration_package_keyword',
    'package_declaration_right_brace',
    'package_declaration_uses',
  ],
  'package_uses' => keyset[
    'package_uses_left_brace',
    'package_uses_right_brace',
    'package_uses_use_keyword',
    'package_uses_uses',
  ],
  'package_includes' => keyset[
    'package_includes_include_keyword',
    'package_includes_includes',
    'package_includes_left_brace',
    'package_includes_right_brace',
  ],
];
