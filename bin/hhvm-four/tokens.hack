/** portable-hack-ast is MIT licensed, see /LICENSE. */
namespace HTL\Pha\_Private\Bin;

const dict<string, string> HHVM_FOUR_TOKENS = dict[
  'error_token' => 'error_token',
  'name' => 'name',
  'variable' => 'variable',
  'decimal_literal' => 'decimal_literal',
  'octal_literal' => 'octal_literal',
  'hexadecimal_literal' => 'hexadecimal_literal',
  'binary_literal' => 'binary_literal',
  'floating_literal' => 'floating_literal',
  'single_quoted_string_literal' => 'single_quoted_string_literal',
  'double_quoted_string_literal' => 'double_quoted_string_literal',
  'double_quoted_string_literal_head' => 'double_quoted_string_literal_head',
  'string_literal_body' => 'string_literal_body',
  'double_quoted_string_literal_tail' => 'double_quoted_string_literal_tail',
  'heredoc_string_literal' => 'heredoc_string_literal',
  'heredoc_string_literal_head' => 'heredoc_string_literal_head',
  'heredoc_string_literal_tail' => 'heredoc_string_literal_tail',
  'nowdoc_string_literal' => 'nowdoc_string_literal',
  'boolean_literal' => 'boolean_literal',
  'xhp_category_name' => 'XHP_category_name',
  'xhp_element_name' => 'XHP_element_name',
  'xhp_class_name' => 'XHP_class_name',
  'xhp_string_literal' => 'XHP_string_literal',
  'xhp_body' => 'XHP_body',
  'xhp_comment' => 'XHP_comment',
  'hashbang' => 'hashbang',
  'abstract' => 'abstract',
  'ampersand' => '&',
  'ampersand_ampersand' => '&&',
  'ampersand_equal' => '&=',
  'arraykey' => 'arraykey',
  'as' => 'as',
  'async' => 'async',
  'at' => '@',
  'attribute' => 'attribute',
  'await' => 'await',
  'backslash' => '\\',
  'backtick' => '`',
  'bar' => '|',
  'bar_bar' => '||',
  'bar_equal' => '|=',
  'bar_greater_than' => '|>',
  'binary' => 'binary',
  'bool' => 'bool',
  'boolean' => 'boolean',
  'break' => 'break',
  'carat' => '^',
  'carat_equal' => '^=',
  'case' => 'case',
  'catch' => 'catch',
  'category' => 'category',
  'children' => 'children',
  'class' => 'class',
  'classname' => 'classname',
  'clone' => 'clone',
  'colon' => ':',
  'colon_colon' => '::',
  'comma' => ',',
  'concurrent' => 'concurrent',
  'const' => 'const',
  'construct' => '__construct',
  'continue' => 'continue',
  'ctx' => 'ctx',
  'darray' => 'darray',
  'default' => 'default',
  'define' => 'define',
  'dict' => 'dict',
  'do' => 'do',
  'dollar' => '$',
  'dollar_dollar' => '$$',
  'dot' => '.',
  'dot_dot_dot' => '...',
  'dot_equal' => '.=',
  'double' => 'double',
  'echo' => 'echo',
  'else' => 'else',
  'elseif' => 'elseif',
  'empty' => 'empty',
  'endfor' => 'endfor',
  'endforeach' => 'endforeach',
  'endif' => 'endif',
  'endswitch' => 'endswitch',
  'endwhile' => 'endwhile',
  'enum' => 'enum',
  'equal' => '=',
  'equal_equal' => '==',
  'equal_equal_equal' => '===',
  'equal_equal_greater_than' => '==>',
  'equal_greater_than' => '=>',
  'eval' => 'eval',
  'exclamation' => '!',
  'exclamation_equal' => '!=',
  'exclamation_equal_equal' => '!==',
  'extends' => 'extends',
  'fallthrough' => 'fallthrough',
  'file' => 'file',
  'final' => 'final',
  'finally' => 'finally',
  'float' => 'float',
  'for' => 'for',
  'foreach' => 'foreach',
  'from' => 'from',
  'function' => 'function',
  'global' => 'global',
  'greater_than' => '>',
  'greater_than_equal' => '>=',
  'greater_than_greater_than' => '>>',
  'greater_than_greater_than_equal' => '>>=',
  'hash' => '#',
  'if' => 'if',
  'implements' => 'implements',
  'include' => 'include',
  'include_once' => 'include_once',
  'inout' => 'inout',
  'instanceof' => 'instanceof',
  'insteadof' => 'insteadof',
  'int' => 'int',
  'integer' => 'integer',
  'interface' => 'interface',
  'is' => 'is',
  'isset' => 'isset',
  'keyset' => 'keyset',
  'lateinit' => 'lateinit',
  'left_brace' => '{',
  'left_bracket' => '[',
  'left_paren' => '(',
  'less_than' => '<',
  'less_than_equal' => '<=',
  'less_than_equal_greater_than' => '<=>',
  'less_than_less_than' => '<<',
  'less_than_less_than_equal' => '<<=',
  'less_than_question' => '<?',
  'less_than_slash' => '</',
  'list' => 'list',
  'minus' => '-',
  'minus_equal' => '-=',
  'minus_greater_than' => '->',
  'minus_minus' => '--',
  'mixed' => 'mixed',
  'namespace' => 'namespace',
  'new' => 'new',
  'newtype' => 'newtype',
  'noreturn' => 'noreturn',
  'null_literal' => 'null',
  'num' => 'num',
  'object' => 'object',
  'parent' => 'parent',
  'percent' => '%',
  'percent_equal' => '%=',
  'plus' => '+',
  'plus_equal' => '+=',
  'plus_plus' => '++',
  'print' => 'print',
  'private' => 'private',
  'protected' => 'protected',
  'public' => 'public',
  'question' => '?',
  'question_as' => '?as',
  'question_colon' => '?:',
  'question_minus_greater_than' => '?->',
  'question_question' => '??',
  'question_question_equal' => '??=',
  'real' => 'real',
  'record' => 'recordname',
  'record_dec' => 'record',
  'reify' => 'reify',
  'require' => 'require',
  'require_once' => 'require_once',
  'required' => 'required',
  'resource' => 'resource',
  'return' => 'return',
  'right_brace' => '}',
  'right_bracket' => ']',
  'right_paren' => ')',
  'self' => 'self',
  'semicolon' => ';',
  'shape' => 'shape',
  'slash' => '/',
  'slash_equal' => '/=',
  'slash_greater_than' => '/>',
  'star' => '*',
  'star_equal' => '*=',
  'star_star' => '**',
  'star_star_equal' => '**=',
  'static' => 'static',
  'string' => 'string',
  'super' => 'super',
  'switch' => 'switch',
  'this' => 'this',
  'throw' => 'throw',
  'tilde' => '~',
  'trait' => 'trait',
  'try' => 'try',
  'tuple' => 'tuple',
  'type' => 'type',
  'unset' => 'unset',
  'use' => 'use',
  'using' => 'using',
  'var' => 'var',
  'varray' => 'varray',
  'vec' => 'vec',
  'void' => 'void',
  'where' => 'where',
  'while' => 'while',
  'xhp' => 'xhp',
  'yield' => 'yield',
  'readonly' => 'readonly',
  'newctx' => 'newctx',
  'upcast' => 'upcast',
  'module' => 'module',
  'internal' => 'internal',
  'with' => 'with',
  'exports' => 'exports',
  'imports' => 'imports',
  'package' => 'package',
];
