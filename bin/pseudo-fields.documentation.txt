Some made up syntax for a made up documentation language.
`field_x` is the name of the Hack variable in create_node().
`sizeof(...)` is the amount of bits (not bytes) of a field.
`group`, `parent_idx`, `idx` are names of fields which are always valid.
`union` indicates that a single physical position holds one of n logical fields.
Which logical field is valid depends on the "class" of the Node.

abstract class Node {
  field_0 sizeof(2) group;
  
  field_1 sizeof(8) union {
    child_count,
    kind,
  };

  field_2 sizeof(18) parent_idx;

  field_3 sizeof(18) union {
    first_child_sibling_id,
    source_byte_offset,
    token_text_trivium_offset,
  };

  field_4 sizeof(18) idx;
}

final class Syntax {
  pick field_1: kind, field_3: first_child_sibling_id;
  group = 0b10;
}

final class Token {
  pick field_1: kind, field_3: token_text_trivium_offset;
  group = 0b01;
}

final class Trivium {
  pick field_1: kind, field_3: source_byte_offset;
  group = 0b00;
}

final class List {
  pick field_1: child_count, field_3: first_child_sibling_id;
  group = 11;
  number_of_children = non-zero; // 1.
}

final class Missing {
  pick field_1: child_count, field_3: first_child_sibling_id;
  group = 11;
  number_of_children = 0;
  first_child_sibling_id = 0; // 1.
}

1. List and Missing share a group tag,
but their number of children field serves as a way to distinguish them.